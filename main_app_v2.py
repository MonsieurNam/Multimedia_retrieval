print("--- üöÄ B·∫Øt ƒë·∫ßu kh·ªüi ch·∫°y AIC25 Battle Station v2 ---")
print("--- Giai ƒëo·∫°n 1/4: ƒêang t·∫£i c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt...")

import gradio as gr
import pandas as pd
import numpy as np
import time
from enum import Enum

# ==============================================================================
# === PH·∫¶N MOCK BACKEND - Gi·∫£ l·∫≠p c√°c class ƒë·ªÉ ph√°t tri·ªÉn UI ===
# ==============================================================================
# Ch√∫ng ta s·∫Ω thay th·∫ø ph·∫ßn n√†y b·∫±ng code backend th·∫≠t ·ªü c√°c giai ƒëo·∫°n sau.

class MockTaskType(Enum):
    """Enum gi·∫£ l·∫≠p cho c√°c lo·∫°i nhi·ªám v·ª•."""
    KIS = "Textual KIS"
    QNA = "Question Answering"
    TRAKE = "Action Keyframe Tracking"
    
def create_mock_trake_steps(num_steps=4, num_candidates_per_step=10):
    """N√¢ng c·∫•p ƒë·ªÉ tr·∫£ v·ªÅ DataFrame cho m·ªói b∆∞·ªõc."""
    all_steps_dfs = []
    base_timestamp = 100
    for step in range(num_steps):
        data = {
            'keyframe_id': [f'L01_V001_{step}_{i:03d}' for i in range(num_candidates_per_step)],
            'video_id': ['L01_V001'] * num_candidates_per_step,
            'timestamp': np.round(np.sort(np.random.uniform(base_timestamp, base_timestamp + 50, num_candidates_per_step)), 2),
            'final_score': np.round(np.random.uniform(0.6, 0.9, num_candidates_per_step), 4),
            'video_path': ['/kaggle/input/aic-2024-public-test-data-2nd/videos/L01_V001.mp4'] * num_candidates_per_step
        }
        all_steps_dfs.append(pd.DataFrame(data))
        base_timestamp += 100 # ƒê·∫£m b·∫£o c√°c b∆∞·ªõc sau c√≥ timestamp l·ªõn h∆°n
    return all_steps_dfs

def create_mock_kis_qna_df(num_rows=200):
    """T·∫°o m·ªôt DataFrame gi·∫£ l·∫≠p cho k·∫øt qu·∫£ KIS/Q&A."""
    data = {
        'keyframe_id': [f'L{np.random.randint(1, 5)}_V00{np.random.randint(1, 9)}_{i:04d}' for i in range(num_rows)],
        'video_id': [f'L{np.random.randint(1, 5)}_V00{np.random.randint(1, 9)}' for _ in range(num_rows)],
        'timestamp': np.random.uniform(10, 1000, num_rows).round(2),
        'clip_score': np.random.uniform(0.7, 0.95, num_rows).round(4),
        'object_score': np.random.uniform(0.1, 0.9, num_rows).round(4),
        'semantic_score': np.random.uniform(0.2, 0.8, num_rows).round(4),
        'final_score': np.random.uniform(0.5, 0.85, num_rows).round(4),
        'answer': [f'C√¢u tr·∫£ l·ªùi m·∫´u {i}' for i in range(num_rows)]
    }
    df = pd.DataFrame(data)
    # S·∫Øp x·∫øp theo final_score gi·∫£m d·∫ßn ƒë·ªÉ gi·∫£ l·∫≠p k·∫øt qu·∫£ th·ª±c t·∫ø
    return df.sort_values(by='final_score', ascending=False).reset_index(drop=True)

def create_mock_trake_steps(num_steps=4, num_candidates_per_step=50):
    """T·∫°o d·ªØ li·ªáu gi·∫£ l·∫≠p cho c√°c b∆∞·ªõc c·ªßa TRAKE."""
    all_steps = []
    for step in range(num_steps):
        step_candidates = []
        for i in range(num_candidates_per_step):
            step_candidates.append({
                'keyframe_id': f'L{np.random.randint(1, 5)}_V00{np.random.randint(1, 9)}_{i:04d}',
                'video_id': f'L{np.random.randint(1, 5)}_V00{np.random.randint(1, 9)}',
                'timestamp': np.random.uniform(10 + step * 100, 100 + step * 100),
                'final_score': np.random.uniform(0.6, 0.9),
                'thumbnail_path': '/kaggle/input/aic-2024-public-test-data-2nd/keyframes/L01_V001/000000.jpg' # D√πng ·∫£nh placeholder
            })
        all_steps.append(step_candidates)
    return all_steps

class MockMasterSearcher:
    """Class MasterSearcher gi·∫£ l·∫≠p."""
    def search(self, query: str, config: dict = None):
        time.sleep(1)
        # Lu√¥n tr·∫£ v·ªÅ k·∫øt qu·∫£ TRAKE ƒë·ªÉ test
        print("--- MOCK BACKEND: Lu√¥n tr·∫£ v·ªÅ d·ªØ li·ªáu TRAKE ƒë·ªÉ test Giai ƒëo·∫°n 3 ---")
        return {
            'task_type': MockTaskType.TRAKE,
            'query_analysis': {'task_type': 'TRAKE', 'search_context': query, 'sub_queries': ["b∆∞·ªõc 1", "b∆∞·ªõc 2", "b∆∞·ªõc 3", "b∆∞·ªõc 4"]},
            'kis_qna_candidates': pd.DataFrame(),
            'trake_step_candidates': create_mock_trake_steps(num_steps=4)
        }

mock_master_searcher = MockMasterSearcher()

def create_mock_video_segment(video_path, timestamp):
    return '/kaggle/input/aic-2024-public-test-data-2nd/videos/L01_V001.mp4'

def perform_search(query_text: str):
    """
    H√†m x·ª≠ l√Ω s·ª± ki·ªán ch√≠nh: g·ªçi backend v√† ƒë·ªï d·ªØ li·ªáu v√†o c√°c State.
    *** PHI√äN B·∫¢N S·ª¨A L·ªñI: ƒê·∫£m b·∫£o tr·∫£ v·ªÅ ƒë√∫ng 6 gi√° tr·ªã. ***
    """
    response = mock_master_searcher.search(query_text)
    task_type = response['task_type']
    query_analysis = response['query_analysis']
    kis_qna_candidates = response['kis_qna_candidates']
    trake_step_candidates = response['trake_step_candidates']
    analysis_summary = (f"<b>Lo·∫°i nhi·ªám v·ª•:</b> {task_type.value}<br>"
                      f"<b>B·ªëi c·∫£nh t√¨m ki·∫øm:</b> {query_analysis.get('search_context', 'N/A')}")

    if task_type == MockTaskType.TRAKE:
        status_msg = f"ƒê√£ t√¨m th·∫•y ·ª©ng vi√™n cho {len(trake_step_candidates)} b∆∞·ªõc TRAKE. B·∫Øt ƒë·∫ßu l·∫Øp r√°p chu·ªói."
        
        # =======================================================
        # === S·ª¨A L·ªñI T·∫†I ƒê√ÇY ===
        # Th√™m pd.DataFrame() v√†o cu·ªëi ƒë·ªÉ kh·ªõp v·ªõi 6 outputs
        # =======================================================
        return (
            analysis_summary,           # 1. analysis_summary_output
            response,                   # 2. full_response_state
            pd.DataFrame(),             # 3. kis_qna_table (x√≥a tr·∫Øng)
            trake_step_candidates,      # 4. trake_steps_state
            status_msg,                 # 5. status_kis_qna
            pd.DataFrame()              # 6. kis_qna_df_state (x√≥a tr·∫Øng)
        )
        # =======================================================

    else: # KIS ho·∫∑c QNA
        status_msg = f"ƒê√£ t√¨m th·∫•y {len(kis_qna_candidates)} ·ª©ng vi√™n KIS/QNA"
        
        # Nh√°nh n√†y ƒë√£ ƒë√∫ng 6 gi√° tr·ªã, gi·ªØ nguy√™n
        return (
            analysis_summary,           # 1. analysis_summary_output
            response,                   # 2. full_response_state
            kis_qna_candidates,         # 3. kis_qna_table
            [],                         # 4. trake_steps_state (x√≥a tr·∫Øng)
            status_msg,                 # 5. status_kis_qna
            kis_qna_candidates          # 6. kis_qna_df_state
        )

def on_kis_qna_select(kis_qna_df: pd.DataFrame, evt: gr.SelectData):
    """
    H√†m x·ª≠ l√Ω khi ng∆∞·ªùi d√πng ch·ªçn m·ªôt h√†ng trong b·∫£ng KIS/Q&A.
    """
    if evt.index is None or kis_qna_df.empty:
        return None, "Vui l√≤ng ch·ªçn m·ªôt h√†ng ƒë·ªÉ xem chi ti·∫øt."

    # L·∫•y th√¥ng tin c·ªßa h√†ng ƒë∆∞·ª£c ch·ªçn
    selected_row_index = evt.index[0] # evt.index l√† m·ªôt tuple (row_index, col_index)
    selected_row = kis_qna_df.iloc[selected_row_index]
    
    # T·∫°o video clip (s·ª≠ d·ª•ng mock)
    video_clip = create_mock_video_segment(selected_row['video_path'], selected_row['timestamp'])
    
    # T·∫°o HTML hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt
    detailed_info_html = f"""
    <h4>Th√¥ng tin Chi ti·∫øt</h4>
    <ul>
        <li><b>Video ID:</b> {selected_row['video_id']}</li>
        <li><b>Keyframe ID:</b> {selected_row['keyframe_id']}</li>
        <li><b>Timestamp:</b> {selected_row['timestamp']:.2f}s</li>
        <li><b>Final Score:</b> {selected_row['final_score']:.4f}</li>
        <hr>
        <li><b>Clip Score:</b> {selected_row['clip_score']:.4f}</li>
        <li><b>Object Score:</b> {selected_row['object_score']:.4f}</li>
        <li><b>Semantic Score:</b> {selected_row['semantic_score']:.4f}</li>
        <hr>
        <li><b>C√¢u tr·∫£ l·ªùi (VQA):</b> {selected_row['answer']}</li>
    </ul>
    """
    
    return video_clip, detailed_info_html

def update_kis_qna_view(kis_qna_df: pd.DataFrame, sort_by: str, filter_video: str):
    """
    H√†m ƒë·ªÉ l·ªçc v√† s·∫Øp x·∫øp l·∫°i b·∫£ng KIS/Q&A.
    """
    if kis_qna_df is None or kis_qna_df.empty:
        return pd.DataFrame() # Tr·∫£ v·ªÅ DF r·ªóng n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu

    # Sao ch√©p ƒë·ªÉ kh√¥ng thay ƒë·ªïi state g·ªëc
    df_processed = kis_qna_df.copy()
    
    # L·ªçc theo video ID
    if filter_video and filter_video.strip():
        df_processed = df_processed[df_processed['video_id'].str.contains(filter_video.strip(), case=False)]
        
    # S·∫Øp x·∫øp
    if sort_by and sort_by in df_processed.columns:
        # Gi·∫£ s·ª≠ ƒëi·ªÉm cao h∆°n l√† t·ªët h∆°n
        is_ascending = not ('score' in sort_by)
        df_processed = df_processed.sort_values(by=sort_by, ascending=is_ascending)
        
    return df_processed

def add_to_submission_list(submission_list: pd.DataFrame, kis_qna_df: pd.DataFrame, evt: gr.SelectData):
    """
    Th√™m h√†ng ƒëang ƒë∆∞·ª£c ch·ªçn v√†o danh s√°ch n·ªôp b√†i.
    *** PHI√äN B·∫¢N C·∫¨P NH·∫¨T: Tr·∫£ v·ªÅ th√™m gi√° tr·ªã ƒë·ªÉ x√≥a l·ª±a ch·ªçn (deselect). ***
    """
    if evt.index is None or kis_qna_df.empty:
        gr.Warning("Ch∆∞a c√≥ ·ª©ng vi√™n n√†o ƒë∆∞·ª£c ch·ªçn!")
        # Tr·∫£ v·ªÅ danh s√°ch g·ªëc v√† kh√¥ng thay ƒë·ªïi l·ª±a ch·ªçn
        return submission_list, None

    selected_row_index = evt.index[0]
    selected_row = kis_qna_df.iloc[[selected_row_index]] # L·∫•y d∆∞·ªõi d·∫°ng DataFrame
    
    if submission_list is None:
        submission_list = pd.DataFrame()

    # Th√™m h√†ng m·ªõi v√†o cu·ªëi danh s√°ch
    updated_list = pd.concat([submission_list, selected_row]).reset_index(drop=True)
    gr.Info(f"ƒê√£ th√™m {selected_row['keyframe_id'].iloc[0]} v√†o danh s√°ch n·ªôp b√†i!")
    
    # **THAY ƒê·ªîI QUAN TR·ªåNG**: Tr·∫£ v·ªÅ 2 gi√° tr·ªã:
    # 1. DataFrame ƒë√£ c·∫≠p nh·∫≠t cho submission_list_table.
    # 2. `None` ƒë·ªÉ x√≥a l·ª±a ch·ªçn trong kis_qna_table.
    return updated_list, None

def build_trake_workspace(trake_steps_data):
    """
    *** H√ÄM S·ª¨A L·ªñI 1 ***
    T·∫°o ho·∫∑c c·∫≠p nh·∫≠t c√°c gi√° tr·ªã cho c√°c component trong kh√¥ng gian l√†m vi·ªác TRAKE.
    H√†m n√†y s·∫Ω tr·∫£ v·ªÅ m·ªôt tuple c√°c gi√° tr·ªã, m·ªói gi√° tr·ªã cho m·ªôt component.
    """
    MAX_STEPS = 6 # Ph·∫£i kh·ªõp v·ªõi s·ªë component ƒë√£ t·∫°o trong UI
    outputs = []
    
    # D·ªØ li·ªáu ƒë·∫ßu v√†o l√† list c√°c DataFrame
    num_steps = len(trake_steps_data) if trake_steps_data else 0

    for i in range(MAX_STEPS):
        if i < num_steps:
            # N·∫øu c√≥ d·ªØ li·ªáu cho b∆∞·ªõc n√†y
            outputs.append(gr.Markdown(f"<h4>B∆∞·ªõc {i+1}</h4>", visible=True))
            outputs.append(gr.DataFrame(trake_steps_data[i], visible=True))
        else:
            # N·∫øu kh√¥ng, ·∫©n component ƒëi
            outputs.append(gr.Markdown(visible=False))
            outputs.append(gr.DataFrame(visible=False))
            
    # Tr·∫£ v·ªÅ m·ªôt tuple, Gradio s·∫Ω t·ª± ƒë·ªông gi·∫£i n√©n n√≥ v√†o c√°c output
    return tuple(outputs)
    
def update_current_sequence(current_sequence: pd.DataFrame, step_index: int, all_steps_data: list, evt: gr.SelectData):
    """
    H√†m ch√≠nh x·ª≠ l√Ω logic "Click-to-Add" cho TRAKE.
    """
    if evt.index is None or not all_steps_data or step_index >= len(all_steps_data):
        return current_sequence, "L·ªói: D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá."

    selected_row_index = evt.index[0]
    df_step = all_steps_data[step_index] # ƒê√¢y l√† list c·ªßa c√°c DataFrame
    selected_row = df_step.iloc[[selected_row_index]]
    
    if current_sequence is None:
        current_sequence = pd.DataFrame()

    # Th√™m c·ªôt 'step' ƒë·ªÉ bi·∫øt frame n√†y thu·ªôc b∆∞·ªõc n√†o
    selected_row['step'] = step_index + 1
    
    # N·ªëi v√†o chu·ªói hi·ªán t·∫°i v√† s·∫Øp x·∫øp l·∫°i theo b∆∞·ªõc
    updated_sequence = pd.concat([current_sequence, selected_row]).sort_values(by='step').reset_index(drop=True)
    
    # X√°c th·ª±c chu·ªói
    is_valid, validation_msg = validate_sequence(updated_sequence)
    
    return updated_sequence, validation_msg

def validate_sequence(sequence_df: pd.DataFrame):
    """Ki·ªÉm tra xem chu·ªói c√≥ h·ª£p l·ªá kh√¥ng (c√πng video, timestamp tƒÉng d·∫ßn)."""
    if sequence_df.empty or len(sequence_df) <= 1:
        return True, "‚úÖ Chu·ªói h·ª£p l·ªá (1 b∆∞·ªõc)."

    # Ki·ªÉm tra c√πng video
    if sequence_df['video_id'].nunique() > 1:
        return False, "‚ùå L·ªói: C√°c b∆∞·ªõc ph·∫£i c√πng m·ªôt video!"

    # Ki·ªÉm tra timestamp tƒÉng d·∫ßn
    if not sequence_df['timestamp'].is_monotonic_increasing:
        return False, "‚ùå L·ªói: Timestamp ph·∫£i tƒÉng d·∫ßn!"

    return True, f"‚úÖ Chu·ªói h·ª£p l·ªá ({len(sequence_df)} b∆∞·ªõc)."

def clear_current_sequence():
    """X√≥a chu·ªói ƒëang x√¢y d·ª±ng."""
    return pd.DataFrame(), "ƒê√£ x√≥a chu·ªói hi·ªán t·∫°i."
    
def add_sequence_to_submission(submission_list: pd.DataFrame, current_sequence: pd.DataFrame):
    """
    *** H√ÄM S·ª¨A L·ªñI 2 ***
    Th√™m chu·ªói hi·ªán t·∫°i (ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c) v√†o danh s√°ch n·ªôp b√†i.
    """
    is_valid, msg = validate_sequence(current_sequence)
    if not is_valid:
        gr.Warning(f"Kh√¥ng th·ªÉ th√™m chu·ªói kh√¥ng h·ª£p l·ªá! {msg}")
        return submission_list
    if current_sequence.empty:
        gr.Warning("Chu·ªói ƒëang x√¢y d·ª±ng r·ªóng!")
        return submission_list

    # **S·ª¨A L·ªñI T·∫†I ƒê√ÇY**: Chuy·ªÉn ƒë·ªïi c·ªôt 'final_score' sang d·∫°ng s·ªë, √©p l·ªói th√†nh NaN
    scores = pd.to_numeric(current_sequence['final_score'], errors='coerce')
    # T√≠nh trung b√¨nh, b·ªè qua c√°c gi√° tr·ªã NaN
    mean_score = scores.mean()

    submission_row = { 'task_type': ['TRAKE'], 'final_score': [mean_score] }
    submission_row['video_id'] = [current_sequence['video_id'].iloc[0]]
    for i, row in current_sequence.iterrows():
        submission_row[f'frame_moment_{i+1}'] = [row['keyframe_id']]
    
    submission_df_row = pd.DataFrame(submission_row)

    if submission_list is None:
        submission_list = pd.DataFrame()
        
    updated_list = pd.concat([submission_list, submission_df_row]).reset_index(drop=True)
    gr.Info(f"ƒê√£ th√™m chu·ªói video {submission_row['video_id'][0]} v√†o danh s√°ch n·ªôp b√†i!")
    
    return updated_list

# ==============================================================================
# === B·∫ÆT ƒê·∫¶U PH·∫¶N GIAO DI·ªÜN GRADIO - PHI√äN B·∫¢N N√ÇNG C·∫§P Gƒê2 ===
# ==============================================================================

with gr.Blocks(theme=gr.themes.Soft(), title="AIC25 Battle Station v2") as app:
    
    # --- Khai b√°o c√°c State ---
    full_response_state = gr.State()
    kis_qna_df_state = gr.State()
    trake_steps_state = gr.State([])
    current_trake_sequence_state = gr.State(pd.DataFrame())
    submission_list_state = gr.State(pd.DataFrame())

    gr.HTML("<h1>üöÄ AIC25 Battle Station v2 - T·ªëi ∆∞u Hi·ªáu su·∫•t</h1>")

    with gr.Row(variant='panel'):
        # --- KHU V·ª∞C 1: B·∫¢NG ƒêI·ªÄU KHI·ªÇN & TRUY V·∫§N (C·ªòT TR√ÅI) ---
        with gr.Column(scale=2):
            gr.Markdown("### 1. B·∫£ng ƒëi·ªÅu khi·ªÉn")
            with gr.Group():
                query_input = gr.Textbox(label="Nh·∫≠p truy v·∫•n", lines=2, placeholder="V√≠ d·ª•: m·ªôt ng∆∞·ªùi ƒëang nh·∫£y qua x√†...")
                search_button = gr.Button("Ph√¢n t√≠ch & Truy xu·∫•t S∆° b·ªô", variant="primary")
                analysis_summary_output = gr.HTML(label="T√≥m t·∫Øt Ph√¢n t√≠ch AI")

            gr.Markdown("### 2. Kh√¥ng gian L√†m vi·ªác")
            with gr.Tabs():
                with gr.TabItem("X√°c th·ª±c Nhanh KIS/Q&A"):
                    status_kis_qna = gr.Markdown("Ch∆∞a c√≥ d·ªØ li·ªáu.")
                    # **C√ÅC WIDGET L·ªåC/S·∫ÆP X·∫æP M·ªöI**
                    with gr.Row():
                        sort_dropdown = gr.Dropdown(
                            label="S·∫Øp x·∫øp theo",
                            choices=['final_score', 'clip_score', 'object_score', 'semantic_score', 'timestamp'],
                            value='final_score'
                        )
                        filter_textbox = gr.Textbox(label="L·ªçc theo Video ID")
                    
                    kis_qna_table = gr.DataFrame(
                        label="Top 200 ·ª®ng vi√™n (Click v√†o h√†ng ƒë·ªÉ xem chi ti·∫øt)",
                        headers=['video_id', 'timestamp', 'final_score', 'clip_score', 'object_score', 'semantic_score'],
                        datatype=['str', 'number', 'number', 'number', 'number', 'number'],
                        row_count=(10, "dynamic"),
                        col_count=(6, "fixed"),
                        interactive=True
                    )

                with gr.TabItem("B√†n L·∫Øp r√°p Chu·ªói TRAKE"):
                    status_trake = gr.Markdown("Ch∆∞a c√≥ d·ªØ li·ªáu. H√£y th·ª±c hi·ªán m·ªôt truy v·∫•n TRAKE.")
                    with gr.Row():
                        # **KHU V·ª∞C L·∫ÆP R√ÅP M·ªöI**
                        with gr.Column(scale=3):
                             gr.Markdown("#### Chu·ªói ƒëang x√¢y d·ª±ng")
                             current_sequence_table = gr.DataFrame(label="Click v√†o ·ª©ng vi√™n b√™n ph·∫£i ƒë·ªÉ th√™m v√†o ƒë√¢y", headers=['step', 'video_id', 'timestamp', 'final_score'])
                             validation_status = gr.Markdown("...")
                             with gr.Row():
                                 add_seq_to_submission_button = gr.Button("‚ûï Th√™m chu·ªói n√†y", variant="primary")
                                 clear_seq_button = gr.Button("üóëÔ∏è X√≥a chu·ªói")
                        
                        # **C√ÅC C·ªòT ·ª®NG VI√äN ƒê·ªòNG**
                        with gr.Column(scale=2):
                            gr.Markdown("#### ·ª®ng vi√™n (Click ƒë·ªÉ th√™m)")
                            # T·∫°o s·∫µn c√°c component, ban ƒë·∫ßu s·∫Ω b·ªã ·∫©n
                            trake_candidate_headers = []
                            trake_candidate_tables = []
                            MAX_STEPS = 6 # Gi·∫£ s·ª≠ truy v·∫•n TRAKE c√≥ t·ªëi ƒëa 6 b∆∞·ªõc
                            for i in range(MAX_STEPS):
                                header = gr.Markdown(f"<h4>B∆∞·ªõc {i+1}</h4>", visible=False)
                                table = gr.DataFrame(
                                    headers=['keyframe_id', 'timestamp', 'final_score'],
                                    row_count=(5, "dynamic"),
                                    interactive=True,
                                    visible=False
                                )
                                trake_candidate_headers.append(header)
                                trake_candidate_tables.append(table)

        # --- KHU V·ª∞C 2 & 3: X·∫æP H·∫†NG & CHI TI·∫æT (C·ªòT PH·∫¢I) ---
        with gr.Column(scale=1):
            gr.Markdown("### 3. B·∫£ng X·∫øp h·∫°ng & Xem chi ti·∫øt")
            with gr.Tabs():
                with gr.TabItem("Xem chi ti·∫øt"):
                    # **N√öT TH√äM V√ÄO DANH S√ÅCH M·ªöI**
                    add_to_submission_button = gr.Button("‚ûï Th√™m ·ª©ng vi√™n n√†y v√†o Danh s√°ch N·ªôp b√†i")
                    video_player = gr.Video(label="Video Clip Preview")
                    detailed_info = gr.HTML("Th√¥ng tin chi ti·∫øt s·∫Ω hi·ªán ·ªü ƒë√¢y khi b·∫°n ch·ªçn m·ªôt ·ª©ng vi√™n.")
                
                with gr.TabItem("Danh s√°ch N·ªôp b√†i (Top 100)"):
                    submission_list_table = gr.DataFrame(
                        label="Danh s√°ch n√†y s·∫Ω ƒë∆∞·ª£c s·∫Øp x·∫øp l·∫°i b·∫±ng tay ·ªü Gƒê4",
                        interactive=True
                    )
            
            with gr.Group():
                 gr.Markdown("#### N·ªôp b√†i")
                 query_id_input = gr.Textbox(label="Query ID", placeholder="query_01")
                 submission_button = gr.Button("T·∫°o File N·ªôp b√†i")

    # ==============================================================================
    # === K·∫æT N·ªêI C√ÅC S·ª∞ KI·ªÜN T∆Ø∆†NG T√ÅC - PHI√äN B·∫¢N Gƒê2 ===
    # ==============================================================================
    
    # 1. S·ª± ki·ªán T√¨m ki·∫øm ch√≠nh (C·∫≠p nh·∫≠t ƒë·ªÉ ƒëi·ªÅn v√†o state DataFrame g·ªëc)
    search_button.click(
        fn=perform_search,
        inputs=[query_input],
        outputs=[
            analysis_summary_output, full_response_state,
            kis_qna_table, trake_steps_state, status_kis_qna,
            kis_qna_df_state
        ]
    ).then(
        fn=build_trake_workspace,
        inputs=[trake_steps_state],
        # **S·ª¨A L·ªñI 1**: Unpack list component ra
        outputs=trake_candidate_headers + trake_candidate_tables
    )
    
    # 2. S·ª± ki·ªán Ch·ªçn m·ªôt h√†ng trong b·∫£ng KIS/Q&A
    kis_qna_table.select(
        fn=on_kis_qna_select,
        inputs=[kis_qna_table], # L·∫•y d·ªØ li·ªáu t·ª´ b·∫£ng ƒëang hi·ªÉn th·ªã
        outputs=[video_player, detailed_info]
    )

    # 3. S·ª± ki·ªán thay ƒë·ªïi c√°c widget l·ªçc ho·∫∑c s·∫Øp x·∫øp
    sort_dropdown.change(
        fn=update_kis_qna_view,
        inputs=[kis_qna_df_state, sort_dropdown, filter_textbox], # D√πng state g·ªëc ƒë·ªÉ t√≠nh to√°n
        outputs=[kis_qna_table] # Ch·ªâ c·∫≠p nh·∫≠t b·∫£ng hi·ªÉn th·ªã
    )
    filter_textbox.submit(
        fn=update_kis_qna_view,
        inputs=[kis_qna_df_state, sort_dropdown, filter_textbox],
        outputs=[kis_qna_table]
    )

    # 4. S·ª± ki·ªán b·∫•m n√∫t "Th√™m v√†o Danh s√°ch N·ªôp b√†i"
    add_to_submission_button.click(
        fn=add_to_submission_list,
        inputs=[submission_list_state, kis_qna_table],
        # **THAY ƒê·ªîI QUAN TR·ªåNG**: Output gi·ªù l√† m·ªôt list g·ªìm 2 component
        outputs=[
            submission_list_table, # C·∫≠p nh·∫≠t b·∫£ng danh s√°ch n·ªôp b√†i
            kis_qna_table          # Truy·ªÅn `None` v√†o ƒë√¢y ƒë·ªÉ x√≥a l·ª±a ch·ªçn
        ]
    )
    for i, table in enumerate(trake_candidate_tables):
        table.select(
            fn=update_current_sequence,
            inputs=[current_trake_sequence_state, gr.State(i), trake_steps_state],
            outputs=[current_sequence_table, validation_status]
        )
    clear_seq_button.click(
        fn=clear_current_sequence,
        outputs=[current_sequence_table, validation_status]
    )
    add_seq_to_submission_button.click(
        fn=add_sequence_to_submission,
        inputs=[submission_list_state, current_sequence_table],
        outputs=[submission_list_table] # S·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t ·ªü Gƒê4
    ).then(
        fn=clear_current_sequence, # T·ª± ƒë·ªông x√≥a chu·ªói sau khi th√™m th√†nh c√¥ng
        outputs=[current_sequence_table, validation_status]
    )

if __name__ == "__main__":
    app.launch(debug=True, share=True)