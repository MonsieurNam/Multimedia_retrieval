print("--- üöÄ B·∫Øt ƒë·∫ßu kh·ªüi ch·∫°y AIC25 Battle Station v2 ---")
print("--- Giai ƒëo·∫°n 1/4: ƒêang t·∫£i c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt...")

import gradio as gr
import pandas as pd
import numpy as np
import time
from enum import Enum

# ==============================================================================
# === PH·∫¶N MOCK BACKEND - Gi·∫£ l·∫≠p c√°c class ƒë·ªÉ ph√°t tri·ªÉn UI ===
# ==============================================================================
# Ch√∫ng ta s·∫Ω thay th·∫ø ph·∫ßn n√†y b·∫±ng code backend th·∫≠t ·ªü c√°c giai ƒëo·∫°n sau.

class MockTaskType(Enum):
    """Enum gi·∫£ l·∫≠p cho c√°c lo·∫°i nhi·ªám v·ª•."""
    KIS = "Textual KIS"
    QNA = "Question Answering"
    TRAKE = "Action Keyframe Tracking"

def create_mock_kis_qna_df(num_rows=200):
    """T·∫°o m·ªôt DataFrame gi·∫£ l·∫≠p cho k·∫øt qu·∫£ KIS/Q&A."""
    data = {
        'keyframe_id': [f'L{np.random.randint(1, 5)}_V00{np.random.randint(1, 9)}_{i:04d}' for i in range(num_rows)],
        'video_id': [f'L{np.random.randint(1, 5)}_V00{np.random.randint(1, 9)}' for _ in range(num_rows)],
        'timestamp': np.random.uniform(10, 1000, num_rows).round(2),
        'clip_score': np.random.uniform(0.7, 0.95, num_rows).round(4),
        'object_score': np.random.uniform(0.1, 0.9, num_rows).round(4),
        'semantic_score': np.random.uniform(0.2, 0.8, num_rows).round(4),
        'final_score': np.random.uniform(0.5, 0.85, num_rows).round(4),
        'answer': [f'C√¢u tr·∫£ l·ªùi m·∫´u {i}' for i in range(num_rows)]
    }
    df = pd.DataFrame(data)
    # S·∫Øp x·∫øp theo final_score gi·∫£m d·∫ßn ƒë·ªÉ gi·∫£ l·∫≠p k·∫øt qu·∫£ th·ª±c t·∫ø
    return df.sort_values(by='final_score', ascending=False).reset_index(drop=True)

def create_mock_trake_steps(num_steps=4, num_candidates_per_step=50):
    """T·∫°o d·ªØ li·ªáu gi·∫£ l·∫≠p cho c√°c b∆∞·ªõc c·ªßa TRAKE."""
    all_steps = []
    for step in range(num_steps):
        step_candidates = []
        for i in range(num_candidates_per_step):
            step_candidates.append({
                'keyframe_id': f'L{np.random.randint(1, 5)}_V00{np.random.randint(1, 9)}_{i:04d}',
                'video_id': f'L{np.random.randint(1, 5)}_V00{np.random.randint(1, 9)}',
                'timestamp': np.random.uniform(10 + step * 100, 100 + step * 100),
                'final_score': np.random.uniform(0.6, 0.9),
                'thumbnail_path': '/kaggle/input/aic-2024-public-test-data-2nd/keyframes/L01_V001/000000.jpg' # D√πng ·∫£nh placeholder
            })
        all_steps.append(step_candidates)
    return all_steps

class MockMasterSearcher:
    """Class MasterSearcher gi·∫£ l·∫≠p."""
    def search(self, query: str, config: dict = None):
        print(f"--- MOCK BACKEND: Nh·∫≠n truy v·∫•n '{query}' ---")
        time.sleep(2) # Gi·∫£ l·∫≠p th·ªùi gian x·ª≠ l√Ω
        if "nh·∫£y" in query or "(1)" in query or "b∆∞·ªõc" in query:
            print("--- MOCK BACKEND: Ph√¢n lo·∫°i l√† TRAKE ---")
            return {
                'task_type': MockTaskType.TRAKE,
                'query_analysis': {'task_type': 'TRAKE', 'search_context': query, 'objects_en': ['jump', 'athlete']},
                'kis_qna_candidates': pd.DataFrame(),
                'trake_step_candidates': create_mock_trake_steps(num_steps=4)
            }
        else:
            print("--- MOCK BACKEND: Ph√¢n lo·∫°i l√† KIS/QNA ---")
            return {
                'task_type': MockTaskType.KIS,
                'query_analysis': {'task_type': 'KIS', 'search_context': query, 'objects_en': ['car', 'street']},
                'kis_qna_candidates': create_mock_kis_qna_df(200),
                'trake_step_candidates': []
            }

mock_master_searcher = MockMasterSearcher()

# ==============================================================================
# === B·∫ÆT ƒê·∫¶U PH·∫¶N CODE GIAO DI·ªÜN GRADIO ===
# ==============================================================================
print("--- Giai ƒëo·∫°n 2/4: ƒêang ƒë·ªãnh nghƒ©a c√°c h√†m logic cho giao di·ªán...")

def perform_search(query_text: str):
    """
    H√†m x·ª≠ l√Ω s·ª± ki·ªán ch√≠nh: g·ªçi backend v√† ƒë·ªï d·ªØ li·ªáu v√†o c√°c State.
    """
    print(f"--- UI: B·∫Øt ƒë·∫ßu t√¨m ki·∫øm cho '{query_text}' ---")
    
    # 1. G·ªçi backend (phi√™n b·∫£n mock)
    response = mock_master_searcher.search(query_text)
    
    # 2. L·∫•y d·ªØ li·ªáu t·ª´ response
    task_type = response['task_type']
    query_analysis = response['query_analysis']
    kis_qna_candidates = response['kis_qna_candidates']
    trake_step_candidates = response['trake_step_candidates']
    
    # 3. Chu·∫©n b·ªã ƒë·∫ßu ra ƒë·ªÉ c·∫≠p nh·∫≠t UI
    # T·∫°o chu·ªói t√≥m t·∫Øt ph√¢n t√≠ch
    analysis_summary = (
        f"<b>Lo·∫°i nhi·ªám v·ª•:</b> {task_type.value}<br>"
        f"<b>B·ªëi c·∫£nh t√¨m ki·∫øm:</b> {query_analysis.get('search_context', 'N/A')}<br>"
        f"<b>Th·ª±c th·ªÉ:</b> {query_analysis.get('objects_en', [])}"
    )
    
    # C·∫≠p nh·∫≠t c√°c component t∆∞∆°ng ·ª©ng v·ªõi lo·∫°i nhi·ªám v·ª•
    if task_type == MockTaskType.TRAKE:
        # N·∫øu l√† TRAKE, c·∫≠p nh·∫≠t kh√¥ng gian l√†m vi·ªác TRAKE v√† x√≥a KIS/Q&A
        return (
            analysis_summary,
            response,
            pd.DataFrame(), # X√≥a b·∫£ng KIS/Q&A
            trake_step_candidates,
            f"ƒê√£ t√¨m th·∫•y ·ª©ng vi√™n cho {len(trake_step_candidates)} b∆∞·ªõc TRAKE"
        )
    else: # KIS ho·∫∑c QNA
        # C·∫≠p nh·∫≠t b·∫£ng KIS/Q&A v√† x√≥a TRAKE
        return (
            analysis_summary,
            response,
            kis_qna_candidates,
            [], # X√≥a d·ªØ li·ªáu c√°c b∆∞·ªõc TRAKE
            f"ƒê√£ t√¨m th·∫•y {len(kis_qna_candidates)} ·ª©ng vi√™n KIS/QNA"
        )


print("--- Giai ƒëo·∫°n 3/4: ƒêang x√¢y d·ª±ng b·ªë c·ª•c giao di·ªán 'Tr·∫°m T√°c chi·∫øn'...")

print("--- Giai ƒëo·∫°n 3/4: ƒêang x√¢y d·ª±ng b·ªë c·ª•c giao di·ªán 'Tr·∫°m T√°c chi·∫øn'...")

with gr.Blocks(theme=gr.themes.Soft(), title="AIC25 Battle Station v2") as app:
    
    # --- Khai b√°o c√°c State ƒë·ªÉ l∆∞u tr·ªØ d·ªØ li·ªáu ---
    # State ch·ª©a to√†n b·ªô response th√¥ t·ª´ backend
    full_response_state = gr.State()
    # State cho b·∫£ng d·ªØ li·ªáu KIS/Q&A (d·∫°ng DataFrame)
    kis_qna_df_state = gr.State()
    # State cho d·ªØ li·ªáu c√°c b∆∞·ªõc TRAKE (d·∫°ng list c·ªßa list)
    trake_steps_state = gr.State()

    gr.HTML("<h1>üöÄ AIC25 Battle Station v2 - T·ªëi ∆∞u Hi·ªáu su·∫•t</h1>")

    with gr.Row(variant='panel'):
        # --- KHU V·ª∞C 1: B·∫¢NG ƒêI·ªÄU KHI·ªÇN & TRUY V·∫§N (C·ªòT TR√ÅI) ---
        with gr.Column(scale=2):
            gr.Markdown("### 1. B·∫£ng ƒëi·ªÅu khi·ªÉn")
            with gr.Group():
                query_input = gr.Textbox(label="Nh·∫≠p truy v·∫•n", lines=2, placeholder="V√≠ d·ª•: m·ªôt ng∆∞·ªùi ƒëang nh·∫£y qua x√†...")
                search_button = gr.Button("Ph√¢n t√≠ch & Truy xu·∫•t S∆° b·ªô", variant="primary")
                analysis_summary_output = gr.HTML(label="T√≥m t·∫Øt Ph√¢n t√≠ch AI")

            gr.Markdown("### 2. Kh√¥ng gian L√†m vi·ªác")
            with gr.Tabs():
                with gr.TabItem("X√°c th·ª±c Nhanh KIS/Q&A"):
                    status_kis_qna = gr.Markdown("Ch∆∞a c√≥ d·ªØ li·ªáu.")
                    
                    # =======================================================
                    # === S·ª¨A L·ªñI T·∫†I ƒê√ÇY ===
                    # X√≥a 'max_rows' v√† thay b·∫±ng 'row_count'
                    # =======================================================
                    kis_qna_table = gr.DataFrame(
                        label="Top 200 ·ª®ng vi√™n (S·∫Øp x·∫øp, L·ªçc, Ch·ªçn ·ªü Giai ƒëo·∫°n 2)",
                        headers=['video_id', 'timestamp', 'final_score', 'clip_score', 'object_score', 'semantic_score'],
                        datatype=['str', 'number', 'number', 'number', 'number', 'number'],
                        row_count=(10, "dynamic"), # Hi·ªÉn th·ªã 10 d√≤ng, cho ph√©p cu·ªôn/ph√¢n trang
                        col_count=(6, "fixed"),    # S·ªë c·ªôt l√† c·ªë ƒë·ªãnh
                        interactive=True # S·∫Ω d√πng ·ªü Gƒê2
                    )
                    # =======================================================
                    # === K·∫æT TH√öC S·ª¨A L·ªñI ===
                    # =======================================================

                with gr.TabItem("B√†n L·∫Øp r√°p Chu·ªói TRAKE"):
                    status_trake = gr.Markdown("Ch∆∞a c√≥ d·ªØ li·ªáu.")
                    # ·ªû Gƒê1, ch√∫ng ta ch·ªâ c·∫ßn m·ªôt placeholder. Gƒê3 s·∫Ω x√¢y d·ª±ng chi ti·∫øt.
                    trake_workspace_placeholder = gr.HTML("Khu v·ª±c n√†y s·∫Ω hi·ªÉn th·ªã c√°c c·ªôt ·ª©ng vi√™n cho t·ª´ng b∆∞·ªõc TRAKE.")


        # --- KHU V·ª∞C 2 & 3: X·∫æP H·∫†NG & CHI TI·∫æT (C·ªòT PH·∫¢I) ---
        with gr.Column(scale=1):
            gr.Markdown("### 3. B·∫£ng X·∫øp h·∫°ng & Xem chi ti·∫øt")
            with gr.Tabs():
                with gr.TabItem("Xem chi ti·∫øt"):
                    video_player_placeholder = gr.Video(label="Video Clip Preview")
                    detailed_info_placeholder = gr.HTML("Th√¥ng tin chi ti·∫øt s·∫Ω hi·ªán ·ªü ƒë√¢y khi b·∫°n ch·ªçn m·ªôt ·ª©ng vi√™n.")
                
                with gr.TabItem("Danh s√°ch N·ªôp b√†i (Top 100)"):
                    # C≈©ng √°p d·ª•ng s·ª≠a l·ªói t∆∞∆°ng t·ª± ·ªü ƒë√¢y
                    submission_list_placeholder = gr.DataFrame(
                        label="Danh s√°ch n√†y s·∫Ω ƒë∆∞·ª£c s·∫Øp x·∫øp l·∫°i b·∫±ng tay ·ªü Gƒê4",
                        row_count=(10, "dynamic"),
                        interactive=True # ƒê·ªÉ c√≥ th·ªÉ ch·ªçn h√†ng v√† s·∫Øp x·∫øp l·∫°i
                    )
            
            with gr.Group():
                 gr.Markdown("#### N·ªôp b√†i")
                 query_id_input = gr.Textbox(label="Query ID", placeholder="query_01")
                 submission_button = gr.Button("T·∫°o File N·ªôp b√†i")


    # ==============================================================================
    # === ƒê·ªäNH NGHƒ®A C√ÅC S·ª∞ KI·ªÜN T∆Ø∆†NG T√ÅC ===
    # ==============================================================================
    print("--- Giai ƒëo·∫°n 4/4: ƒêang k·∫øt n·ªëi c√°c s·ª± ki·ªán t∆∞∆°ng t√°c...")

    search_button.click(
        fn=perform_search,
        inputs=[query_input],
        outputs=[
            analysis_summary_output,
            full_response_state,
            kis_qna_table, # C·∫≠p nh·∫≠t tr·ª±c ti·∫øp b·∫£ng KIS/Q&A
            trake_steps_state, # C·∫≠p nh·∫≠t state TRAKE
            status_kis_qna # D√πng chung status cho c·∫£ 2 ƒë·ªÉ ƒë∆°n gi·∫£n
        ]
    )

if __name__ == "__main__":
    print("\n--- ‚úÖ Kh·ªüi t·∫°o ho√†n t·∫•t. ƒêang launch Gradio App Server... ---")
    app.launch(debug=True, share=True)