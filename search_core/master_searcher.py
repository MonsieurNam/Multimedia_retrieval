from typing import Dict, Any, Optional
import google.generativeai as genai

# Import c√°c module c·ªët l√µi c·ªßa h·ªá th·ªëng
from search_core.task_analyzer import TaskType, analyze_query_gemini, analyze_query_heuristic
from search_core.semantic_searcher import SemanticSearcher
from search_core.vqa_handler import VQAHandler
from search_core.trake_solver import TRAKESolver
class MasterSearcher:
    """
    L·ªõp ƒëi·ªÅu ph·ªëi ch√≠nh c·ªßa h·ªá th·ªëng t√¨m ki·∫øm, ho·∫°t ƒë·ªông nh∆∞ m·ªôt Facade.

    ƒê√¢y l√† entry point duy nh·∫•t cho t·∫•t c·∫£ c√°c truy v·∫•n. N√≥ c√≥ tr√°ch nhi·ªám:
    1.  Kh·ªüi t·∫°o v√† qu·∫£n l√Ω c√°c handler chuy√™n bi·ªát (Semantic, VQA, TRAKE).
    2.  Ph√¢n t√≠ch lo·∫°i truy v·∫•n c·ªßa ng∆∞·ªùi d√πng.
    3.  ƒêi·ªÅu ph·ªëi truy v·∫•n ƒë·∫øn handler ph√π h·ª£p ƒë·ªÉ x·ª≠ l√Ω.
    4.  Th·ª±c hi·ªán c√°c logic nghi·ªáp v·ª• ph·ª©c t·∫°p nh∆∞ k·∫øt h·ª£p k·∫øt qu·∫£, c·∫≠p nh·∫≠t ƒëi·ªÉm s·ªë.
    5.  Tr·∫£ v·ªÅ m·ªôt k·∫øt qu·∫£ c√≥ c·∫•u tr√∫c, s·∫µn s√†ng cho giao di·ªán ng∆∞·ªùi d√πng.
    """

    def __init__(self, 
                 semantic_searcher: SemanticSearcher, 
                 gemini_api_key: Optional[str] = None):
        """
        Kh·ªüi t·∫°o MasterSearcher v√† t·∫•t c·∫£ c√°c th√†nh ph·∫ßn con c·ªßa n√≥.

        Args:
            semantic_searcher (SemanticSearcher): M·ªôt instance c·ªßa SemanticSearcher ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o.
            gemini_api_key (Optional[str]): API key cho Google Gemini. N·∫øu ƒë∆∞·ª£c cung c·∫•p,
                                            c√°c t√≠nh nƒÉng AI n√¢ng cao s·∫Ω ƒë∆∞·ª£c k√≠ch ho·∫°t.
        """
        print("--- üß† Kh·ªüi t·∫°o Master Searcher ---")
        
        self.semantic_searcher = semantic_searcher
        self.gemini_model: Optional[genai.GenerativeModel] = None
        self.vqa_handler: Optional[VQAHandler] = None
        self.trake_solver: Optional[TRAKESolver] = None
        self.ai_enabled = False

        if gemini_api_key:
            try:
                genai.configure(api_key=gemini_api_key)
                # S·ª≠ d·ª•ng 'gemini-1.5-flash' cho s·ª± c√¢n b·∫±ng gi·ªØa t·ªëc ƒë·ªô v√† kh·∫£ nƒÉng
                self.gemini_model = genai.GenerativeModel('gemini-1.5-flash')
                
                # Chia s·∫ª instance Gemini model cho t·∫•t c·∫£ c√°c handler con
                # ƒêi·ªÅu n√†y gi√∫p ti·∫øt ki·ªám t√†i nguy√™n v√† th·ªùi gian kh·ªüi t·∫°o
                self.semantic_searcher.gemini_model = self.gemini_model
                self.vqa_handler = VQAHandler(model=self.gemini_model)
                self.trake_solver = TRAKESolver(gemini_model=self.gemini_model)
                
                print("--- ‚úÖ Gemini v√† c√°c AI Handler ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng! ---")
                self.ai_enabled = True
            except Exception as e:
                print(f"--- ‚ö†Ô∏è L·ªói khi kh·ªüi t·∫°o Gemini: {e}. AI Handler s·∫Ω b·ªã v√¥ hi·ªáu h√≥a. ---")
        else:
            print("--- ‚ö†Ô∏è Kh√¥ng c√≥ API Key. AI Handler (Q&A, TRAKE) s·∫Ω b·ªã v√¥ hi·ªáu h√≥a. ---")
            
        print("--- ‚úÖ Master Searcher ƒë√£ s·∫µn s√†ng! ---")

    def search(self, query: str, top_k: int = 300) -> Dict[str, Any]:
        """
        H√†m t√¨m ki·∫øm ch√≠nh, ƒëi·ªÅu ph·ªëi to√†n b·ªô pipeline.

        Args:
            query (str): C√¢u truy v·∫•n c·ªßa ng∆∞·ªùi d√πng.
            top_k (int): S·ªë l∆∞·ª£ng k·∫øt qu·∫£ cu·ªëi c√πng mong mu·ªën.

        Returns:
            Dict[str, Any]: M·ªôt dictionary ch·ª©a:
                - 'task_type' (TaskType): Lo·∫°i nhi·ªám v·ª• ƒë√£ ƒë∆∞·ª£c ph√¢n lo·∫°i.
                - 'results' (list): Danh s√°ch c√°c k·∫øt qu·∫£ ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω.
                - 'query_analysis' (dict): Th√¥ng tin ph√¢n t√≠ch t·ª´ Gemini (n·∫øu c√≥).
        """
        query_analysis = {}
        if self.ai_enabled:
            print("--- üß† B·∫Øt ƒë·∫ßu ph√¢n t√≠ch v√† tƒÉng c∆∞·ªùng truy v·∫•n b·∫±ng Gemini... ---")
            query_analysis = self.semantic_searcher.enhance_query_with_gemini(query)
            task_type = analyze_query_gemini(query, self.gemini_model)
        else:
            print("--- Ch·∫°y ·ªü ch·∫ø ƒë·ªô KIS c∆° b·∫£n do AI b·ªã v√¥ hi·ªáu h√≥a ---")
            task_type = analyze_query_heuristic(query)
        
        print(f"--- ƒê√£ ph√¢n lo·∫°i truy v·∫•n l√†: {task_type.value} ---")

        final_results = []
        
        # --- ƒêi·ªÅu ph·ªëi d·ª±a tr√™n lo·∫°i nhi·ªám v·ª• ---
        if task_type == TaskType.KIS:
            final_results = self.semantic_searcher.search(
                query, 
                top_k_final=top_k,
                precomputed_analysis=query_analysis
            )

        elif task_type == TaskType.QNA:
            if not self.vqa_handler:
                print("--- ‚ö†Ô∏è Kh√¥ng th·ªÉ x·ª≠ l√Ω Q&A. ƒêang ch·∫°y t√¨m ki·∫øm KIS thay th·∫ø. ---")
                final_results = self.semantic_searcher.search(
                    query, top_k_final=top_k, precomputed_analysis=query_analysis)
            else:
                # 1. T√¨m c√°c keyframe ·ª©ng vi√™n c√≥ li√™n quan
                candidates = self.semantic_searcher.search(
                    query, top_k_final=20, top_k_retrieval=200, precomputed_analysis=query_analysis)
                
                # 2. V·ªõi m·ªói ·ª©ng vi√™n, g·ªçi VQA ƒë·ªÉ l·∫•y c√¢u tr·∫£ l·ªùi v√† c·∫≠p nh·∫≠t ƒëi·ªÉm
                vqa_enhanced_candidates = []
                for cand in candidates:
                    print(f"   -> üó£Ô∏è ƒê·∫∑t c√¢u h·ªèi VQA cho keyframe {cand['keyframe_id']}...")
                    vqa_result = self.vqa_handler.get_answer(cand['keyframe_path'], query)
                    
                    new_cand = cand.copy()
                    new_cand['answer'] = vqa_result['answer']
                    # C·∫≠p nh·∫≠t ƒëi·ªÉm cu·ªëi c√πng b·∫±ng c√°ch nh√¢n v·ªõi ƒë·ªô t·ª± tin c·ªßa VQA
                    # ƒê√¢y l√† m·ªôt b∆∞·ªõc reranking quan tr·ªçng, lo·∫°i b·ªè c√°c ·ª©ng vi√™n c√≥
                    # h√¨nh ·∫£nh ƒë√∫ng nh∆∞ng c√¢u tr·∫£ l·ªùi sai.
                    new_cand['final_score'] *= vqa_result['confidence']
                    new_cand['scores']['vqa_confidence'] = vqa_result['confidence']
                    vqa_enhanced_candidates.append(new_cand)
                
                # 3. S·∫Øp x·∫øp l·∫°i danh s√°ch d·ª±a tr√™n ƒëi·ªÉm s·ªë m·ªõi
                final_results = sorted(vqa_enhanced_candidates, key=lambda x: x['final_score'], reverse=True)

        elif task_type == TaskType.TRAKE:
            if not self.trake_solver:
                print("--- ‚ö†Ô∏è Kh√¥ng th·ªÉ x·ª≠ l√Ω TRAKE. ƒêang ch·∫°y t√¨m ki·∫øm KIS thay th·∫ø. ---")
                final_results = self.semantic_searcher.search(
                    query, top_k_final=top_k, precomputed_analysis=query_analysis)
            else:
                # 1. Ph√¢n r√£ truy v·∫•n th√†nh c√°c b∆∞·ªõc con
                sub_queries = self.trake_solver.decompose_query(query)
                # 2. T√¨m c√°c chu·ªói h·ª£p l·ªá
                final_results = self.trake_solver.find_sequences(
                    sub_queries, self.semantic_searcher, max_sequences=top_k)

        return {
            "task_type": task_type,
            "results": final_results[:top_k], # ƒê·∫£m b·∫£o s·ªë l∆∞·ª£ng k·∫øt qu·∫£ cu·ªëi c√πng ƒë√∫ng b·∫±ng top_k
            "query_analysis": query_analysis
        }