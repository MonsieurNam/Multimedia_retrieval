
from typing import List, Dict, Any
from search_core.openai_handler import OpenAIHandler 

# Import SemanticSearcher ƒë·ªÉ type hinting
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from .semantic_searcher import SemanticSearcher

class TRAKESolver:
    """
    Class x·ª≠ l√Ω Nhi·ªám v·ª• TRAKE.
    Gi·ªù ƒë√¢y n√≥ nh·∫≠n m·ªôt AI Handler ƒë·ªÉ th·ª±c hi·ªán vi·ªác ph√¢n r√£ truy v·∫•n.
    """
    # --- THAY ƒê·ªîI __init__ ---
    def __init__(self, ai_handler: OpenAIHandler):
        """
        Kh·ªüi t·∫°o TRAKESolver.

        Args:
            ai_handler (OpenAIHandler): M·ªôt instance c·ªßa OpenAIHandler ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o.
        """
        self.ai_handler = ai_handler

    # --- THAY ƒê·ªîI decompose_query ---
    def decompose_query(self, query: str) -> List[str]:
        """
        S·ª≠ d·ª•ng AI Handler ƒë∆∞·ª£c cung c·∫•p ƒë·ªÉ t√°ch truy v·∫•n TRAKE th√†nh c√°c b∆∞·ªõc con.
        """
        print(f"--- ü§ñ Ph√¢n r√£ truy v·∫•n TRAKE b·∫±ng AI Handler... ---")
        # ·ª¶y quy·ªÅn ho√†n to√†n vi·ªác g·ªçi API cho handler
        return self.ai_handler.decompose_trake_query(query)

    def find_sequences(self, sub_queries: List[str], searcher: 'SemanticSearcher', top_k_per_step: int = 15, max_sequences: int = 50) -> List[Dict[str, Any]]:
        """
        T√¨m c√°c chu·ªói keyframe h·ª£p l·ªá d·ª±a tr√™n danh s√°ch c√°c truy v·∫•n con.

        Args:
            sub_queries (List[str]): Danh s√°ch c√°c truy v·∫•n cho t·ª´ng b∆∞·ªõc.
            searcher (SemanticSearcher): Instance c·ªßa SemanticSearcher ƒë·ªÉ th·ª±c hi·ªán t√¨m ki·∫øm.
            top_k_per_step (int): S·ªë l∆∞·ª£ng ·ª©ng vi√™n h√†ng ƒë·∫ßu c·∫ßn l·∫•y cho m·ªói b∆∞·ªõc.
            max_sequences (int): S·ªë l∆∞·ª£ng chu·ªói k·∫øt qu·∫£ t·ªëi ƒëa tr·∫£ v·ªÅ.

        Returns:
            List[Dict[str, Any]]: M·ªôt danh s√°ch c√°c chu·ªói h·ª£p l·ªá, ƒë∆∞·ª£c s·∫Øp x·∫øp theo ƒëi·ªÉm.
                                  M·ªói chu·ªói l√† m·ªôt dict ch·ª©a 'video_id', 'sequence' (list of keyframes), v√† 'score'.
        """
        if not sub_queries:
            return []

        print(f"--- B·∫Øt ƒë·∫ßu t√¨m ki·∫øm ·ª©ng vi√™n cho {len(sub_queries)} b∆∞·ªõc TRAKE ---")
        
        # --- B∆∞·ªõc 1: T√¨m ki·∫øm song song ƒë·ªÉ l·∫•y ·ª©ng vi√™n cho m·ªói b∆∞·ªõc ---
        step_candidates = []
        for i, sub_query in enumerate(sub_queries):
            print(f"   -> T√¨m ki·∫øm cho B∆∞·ªõc {i+1}: '{sub_query}'")
            # L·∫•y nhi·ªÅu ·ª©ng vi√™n h∆°n m·ªôt ch√∫t ƒë·ªÉ tƒÉng c∆° h·ªôi t√¨m th·∫•y chu·ªói
            results = searcher.search(sub_query, top_k_final=top_k_per_step, top_k_retrieval=200)
            step_candidates.append(results)

        # --- B∆∞·ªõc 2: Nh√≥m c√°c ·ª©ng vi√™n theo video_id ƒë·ªÉ gi·∫£m kh√¥ng gian t√¨m ki·∫øm ---
        print("\n--- ƒêang nh√≥m c√°c ·ª©ng vi√™n theo video ---")
        candidates_by_video: Dict[str, List[List[Dict]]] = {}
        for i, candidates in enumerate(step_candidates):
            for cand in candidates:
                video_id = cand['video_id']
                if video_id not in candidates_by_video:
                    # T·∫°o c·∫•u tr√∫c [[], [], [], ...] cho m·ªói video
                    candidates_by_video[video_id] = [[] for _ in sub_queries]
                candidates_by_video[video_id][i].append(cand)
        
        # --- B∆∞·ªõc 3: Duy·ªát qua t·ª´ng video ƒë·ªÉ t√¨m c√°c chu·ªói h·ª£p l·ªá ---
        print("\n--- B·∫Øt ƒë·∫ßu l·∫Øp r√°p v√† x√°c th·ª±c c√°c chu·ªói ---")
        valid_sequences = []
        for video_id, steps in candidates_by_video.items():
            # ƒêi·ªÅu ki·ªán ti√™n quy·∫øt: video ph·∫£i c√≥ √≠t nh·∫•t m·ªôt ·ª©ng vi√™n cho M·ªñI b∆∞·ªõc
            if not all(steps):
                continue
            
            # S·ª≠ d·ª•ng `itertools.product` ƒë·ªÉ t·∫°o ra t·∫•t c·∫£ c√°c t·ªï h·ª£p chu·ªói kh·∫£ thi trong video n√†y
            # V√≠ d·ª•: steps = [[a1, a2], [b1], [c1, c2]]
            # product -> (a1, b1, c1), (a1, b1, c2), (a2, b1, c1), (a2, b1, c2)
            for sequence_tuple in product(*steps):
                # Ki·ªÉm tra ƒëi·ªÅu ki·ªán th·ªùi gian tƒÉng d·∫ßn, m·ªôt r√†ng bu·ªôc c·ª©ng
                is_valid_order = all(
                    sequence_tuple[i]['timestamp'] < sequence_tuple[i+1]['timestamp'] 
                    for i in range(len(sequence_tuple) - 1)
                )
                
                if is_valid_order:
                    # T√≠nh ƒëi·ªÉm cho chu·ªói, c√≥ th·ªÉ l√† trung b√¨nh c·ªông ho·∫∑c c√°c ph∆∞∆°ng ph√°p ph·ª©c t·∫°p h∆°n
                    # ·ªû ƒë√¢y d√πng trung b√¨nh c·ªông l√† m·ªôt kh·ªüi ƒë·∫ßu t·ªët
                    avg_score = sum(item['final_score'] for item in sequence_tuple) / len(sequence_tuple)
                    
                    valid_sequences.append({
                        "video_id": video_id,
                        "sequence": list(sequence_tuple), # Chuy·ªÉn tuple th√†nh list
                        "final_score": avg_score  # Th·ªëng nh·∫•t t√™n key l√† 'final_score'
                    })

        # --- B∆∞·ªõc 4: S·∫Øp x·∫øp t·∫•t c·∫£ c√°c chu·ªói h·ª£p l·ªá t·ª´ t·∫•t c·∫£ c√°c video ---
        print(f"--- T√¨m th·∫•y t·ªïng c·ªông {len(valid_sequences)} chu·ªói h·ª£p l·ªá. ƒêang s·∫Øp x·∫øp... ---")
        sorted_sequences = sorted(valid_sequences, key=lambda x: x['final_score'], reverse=True)
        
        return sorted_sequences[:max_sequences]
