
import pandas as pd
from typing import List, Dict, Any
import os

# Import TaskType ƒë·ªÉ s·ª≠ d·ª•ng trong type hinting
from ..search_core.task_analyzer import TaskType

def format_results_for_gallery(response: Dict[str, Any]) -> List[tuple]:
    """
    ƒê·ªãnh d·∫°ng k·∫øt qu·∫£ th√¥ t·ª´ MasterSearcher th√†nh ƒë·ªãnh d·∫°ng ph√π h·ª£p cho gr.Gallery.

    Args:
        response (Dict[str, Any]): Dictionary k·∫øt qu·∫£ tr·∫£ v·ªÅ t·ª´ MasterSearcher.search().

    Returns:
        List[tuple]: Danh s√°ch c√°c tuple, m·ªói tuple ch·ª©a (ƒë∆∞·ªùng_d·∫´n_·∫£nh, caption).
    """
    task_type = response.get("task_type")
    results = response.get("results", [])
    
    formatted_gallery = []

    if not results:
        return []

    if task_type == TaskType.KIS or task_type == TaskType.QNA:
        # ƒê·ªëi v·ªõi KIS v√† QNA, m·ªói k·∫øt qu·∫£ l√† m·ªôt keyframe ƒë∆°n l·∫ª
        for res in results:
            scores = res.get('scores', {})
            final_score = res.get('final_score', 0)
            
            # Th√™m c√¢u tr·∫£ l·ªùi c·ªßa VQA v√†o caption n·∫øu c√≥
            answer_text = f"\nüí¨ Tr·∫£ l·ªùi: {res.get('answer', 'N/A')}" if task_type == TaskType.QNA else ""
            
            caption = (
                f"üìπ {res.get('video_id', 'N/A')}\n"
                f"‚è∞ {res.get('timestamp', 0):.1f}s | üèÜ {final_score:.3f}\n"
                f"üìä C:{scores.get('clip',0):.2f} O:{scores.get('object',0):.2f} S:{scores.get('semantic',0):.2f}"
                f"{answer_text}"
            )
            formatted_gallery.append((res.get('keyframe_path', ''), caption))

    elif task_type == TaskType.TRAKE:
        # ƒê·ªëi v·ªõi TRAKE, m·ªói k·∫øt qu·∫£ l√† m·ªôt chu·ªói. Ta s·∫Ω hi·ªÉn th·ªã keyframe ƒë·∫ßu ti√™n c·ªßa chu·ªói.
        for i, seq_res in enumerate(results):
            sequence = seq_res.get('sequence', [])
            if not sequence:
                continue
            
            first_frame = sequence[0]
            final_score = seq_res.get('final_score', 0)
            
            caption = (
                f"üé¨ Chu·ªói #{i+1} | Video: {seq_res.get('video_id', 'N/A')}\n"
                f"üî¢ {len(sequence)} b∆∞·ªõc | üèÜ ƒêi·ªÉm TB: {final_score:.3f}\n"
                f"‚û°Ô∏è B·∫Øt ƒë·∫ßu l√∫c: {first_frame.get('timestamp', 0):.1f}s"
            )
            formatted_gallery.append((first_frame.get('keyframe_path', ''), caption))

    return formatted_gallery

def format_for_submission(response: Dict[str, Any], max_results: int = 100) -> pd.DataFrame:
    """
    ƒê·ªãnh d·∫°ng k·∫øt qu·∫£ th√¥ th√†nh m·ªôt DataFrame s·∫µn s√†ng ƒë·ªÉ l∆∞u ra file CSV n·ªôp b√†i.

    Args:
        response (Dict[str, Any]): Dictionary k·∫øt qu·∫£ tr·∫£ v·ªÅ t·ª´ MasterSearcher.search().
        max_results (int): S·ªë l∆∞·ª£ng d√≤ng t·ªëi ƒëa trong file n·ªôp b√†i.

    Returns:
        pd.DataFrame: DataFrame c√≥ c√°c c·ªôt ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa ban t·ªï ch·ª©c.
    """
    task_type = response.get("task_type")
    results = response.get("results", [])
    
    submission_data = []

    if task_type == TaskType.KIS:
        # ƒê·ªãnh d·∫°ng: <T√™n video>,<S·ªë th·ª© t·ª± c·ªßa khung h√¨nh>
        for res in results:
            # Gi·∫£ s·ª≠ `keyframe_id` c√≥ d·∫°ng 'Lxx_Vxxx_yyy' v√† yyy l√† frame_index
            # Ho·∫∑c c·∫ßn m·ªôt c·ªôt `frame_index` ri√™ng trong metadata n·∫øu t√™n file kh√¥ng ph·∫£i l√† index
            try:
                # C·∫ßn ƒë·∫£m b·∫£o 'keyframe_id' ch·ª©a th√¥ng tin frame index
                frame_index = int(res.get('keyframe_id', '').split('_')[-1])
                submission_data.append({
                    'video_id': res.get('video_id'),
                    'frame_index': frame_index
                })
            except (ValueError, IndexError):
                # B·ªè qua n·∫øu keyframe_id kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng
                continue

    elif task_type == TaskType.QNA:
        # ƒê·ªãnh d·∫°ng: <T√™n video>,<S·ªë th·ª© t·ª± c·ªßa khung h√¨nh>,<C√¢u tr·∫£ l·ªùi c·ªßa b·∫°n>
        for res in results:
            try:
                frame_index = int(res.get('keyframe_id', '').split('_')[-1])
                submission_data.append({
                    'video_id': res.get('video_id'),
                    'frame_index': frame_index,
                    'answer': res.get('answer', '')
                })
            except (ValueError, IndexError):
                continue
    
    elif task_type == TaskType.TRAKE:
        # ƒê·ªãnh d·∫°ng: <T√™n video>,<Khung h√¨nh cho kho·∫£nh kh·∫Øc 1>,<Khung h√¨nh cho kho·∫£nh kh·∫Øc 2>,...
        for seq_res in results:
            sequence = seq_res.get('sequence', [])
            if not sequence:
                continue
            
            row = {'video_id': seq_res.get('video_id')}
            for i, frame in enumerate(sequence):
                try:
                    frame_index = int(frame.get('keyframe_id', '').split('_')[-1])
                    row[f'frame_moment_{i+1}'] = frame_index
                except (ValueError, IndexError):
                    # N·∫øu m·ªôt frame trong chu·ªói b·ªã l·ªói, ƒë√°nh d·∫•u l√† kh√¥ng h·ª£p l·ªá
                    row[f'frame_moment_{i+1}'] = -1 
            submission_data.append(row)

    # T·∫°o DataFrame v√† ƒë·∫£m b·∫£o c√≥ ƒë√∫ng s·ªë l∆∞·ª£ng d√≤ng
    if not submission_data:
        return pd.DataFrame() # Tr·∫£ v·ªÅ DF r·ªóng n·∫øu kh√¥ng c√≥ k·∫øt qu·∫£

    df = pd.DataFrame(submission_data)
    
    # N·∫øu k·∫øt qu·∫£ √≠t h∆°n max_results, ta c·∫ßn ƒëi·ªÅn th√™m c√°c d√≤ng r·ªóng ho·∫∑c l·∫∑p l·∫°i k·∫øt qu·∫£ cu·ªëi
    # C√°ch ti·∫øp c·∫≠n an to√†n l√† ch·ªâ tr·∫£ v·ªÅ nh·ªØng g√¨ t√¨m ƒë∆∞·ª£c.
    # Ban t·ªï ch·ª©c th∆∞·ªùng s·∫Ω x·ª≠ l√Ω c√°c file n·ªôp c√≥ √≠t h∆°n 100 d√≤ng.
    return df.head(max_results)

def generate_submission_file(df: pd.DataFrame, query_id: str, output_dir: str = "/kaggle/working/submissions") -> str:
    """
    L∆∞u DataFrame th√†nh file CSV theo ƒë√∫ng ƒë·ªãnh d·∫°ng t√™n file.

    Args:
        df (pd.DataFrame): DataFrame ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh d·∫°ng ƒë·ªÉ n·ªôp b√†i.
        query_id (str): ID c·ªßa c√¢u truy v·∫•n (v√≠ d·ª•: 'query_01').
        output_dir (str): Th∆∞ m·ª•c ƒë·ªÉ l∆∞u file.

    Returns:
        str: ƒê∆∞·ªùng d·∫´n ƒë·∫øn file CSV ƒë√£ ƒë∆∞·ª£c t·∫°o.
    """
    if df.empty:
        return "Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ t·∫°o file."

    os.makedirs(output_dir, exist_ok=True)
    file_path = os.path.join(output_dir, f"{query_id}_submission.csv")
    
    # N·ªôp b√†i kh√¥ng c·∫ßn header v√† index
    df.to_csv(file_path, header=False, index=False)
    
    print(f"--- ‚úÖ ƒê√£ t·∫°o file n·ªôp b√†i t·∫°i: {file_path} ---")
    return file_path


# --- Block ƒë·ªÉ ki·ªÉm th·ª≠ nhanh ---
if __name__ == '__main__':
    print("--- Ch·∫°y ki·ªÉm th·ª≠ cho Module Formatting ---")

    # --- D·ªØ li·ªáu gi·∫£ ---
    mock_kis_response = {
        "task_type": TaskType.KIS,
        "results": [
            {'video_id': 'L01_V001', 'keyframe_id': 'L01_V001_505', 'timestamp': 50.5, 'final_score': 0.9},
            {'video_id': 'L01_V002', 'keyframe_id': 'L01_V002_123', 'timestamp': 12.3, 'final_score': 0.8}
        ]
    }
    mock_qna_response = {
        "task_type": TaskType.QNA,
        "results": [
            {'video_id': 'L05_V005', 'keyframe_id': 'L05_V005_888', 'timestamp': 88.8, 'final_score': 0.95, 'answer': 'm√†u xanh'}
        ]
    }
    mock_trake_response = {
        "task_type": TaskType.TRAKE,
        "results": [{
            'video_id': 'L10_V010',
            'final_score': 0.88,
            'sequence': [
                {'keyframe_id': 'L10_V010_101', 'timestamp': 10.1},
                {'keyframe_id': 'L10_V010_156', 'timestamp': 15.6},
                {'keyframe_id': 'L10_V010_203', 'timestamp': 20.3},
            ]
        }]
    }

    print("\n--- 1. Ki·ªÉm th·ª≠ format_for_submission ---")
    
    df_kis = format_for_submission(mock_kis_response)
    print("KIS DataFrame:\n", df_kis)
    assert df_kis.shape == (2, 2)
    assert list(df_kis.columns) == ['video_id', 'frame_index']
    assert df_kis.iloc[0]['frame_index'] == 505

    df_qna = format_for_submission(mock_qna_response)
    print("\nQNA DataFrame:\n", df_qna)
    assert df_qna.shape == (1, 3)
    assert df_qna.iloc[0]['answer'] == 'm√†u xanh'

    df_trake = format_for_submission(mock_trake_response)
    print("\nTRAKE DataFrame:\n", df_trake)
    assert df_trake.shape == (1, 4) # video_id + 3 moments
    assert df_trake.iloc[0]['frame_moment_2'] == 156

    print("\n--- 2. Ki·ªÉm th·ª≠ generate_submission_file ---")
    file_path = generate_submission_file(df_kis, query_id="test_query_01")
    assert os.path.exists(file_path)
    print(f" -> ƒê√£ t·∫°o file: {file_path}")

    print("\n‚úÖ Ki·ªÉm th·ª≠ Module Formatting th√†nh c√¥ng!")
