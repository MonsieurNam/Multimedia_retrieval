
from typing import List, Dict, Any

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from search_core.openai_handler import OpenAIHandler
    from search_core.semantic_searcher import SemanticSearcher

class TRAKESolver:
    """
    Class x·ª≠ l√Ω Nhi·ªám v·ª• 3: TRAKE (TRacking Action KEyframes).

    N√≥ bao g·ªìm hai ch·ª©c nƒÉng ch√≠nh:
    1.  Ph√¢n r√£ m·ªôt truy v·∫•n h√†nh ƒë·ªông ph·ª©c t·∫°p th√†nh c√°c b∆∞·ªõc con (s·ª≠ d·ª•ng AI handler).
    2.  T√¨m ki·∫øm c√°c chu·ªói keyframe h·ª£p l·ªá b·∫±ng c√°ch:
        a. Ph√¢n t√≠ch v√† t√¨m ki·∫øm ·ª©ng vi√™n cho t·ª´ng b∆∞·ªõc con.
        b. L·∫Øp r√°p c√°c ·ª©ng vi√™n th√†nh c√°c chu·ªói h·ª£p l·ªá (c√πng video, ƒë√∫ng th·ª© t·ª±).
    """

    def __init__(self, ai_handler: 'OpenAIHandler'):
        """
        Kh·ªüi t·∫°o TRAKESolver.

        Args:
            ai_handler (OpenAIHandler): M·ªôt instance c·ªßa AI Handler (v√≠ d·ª•: OpenAIHandler)
                                        ƒë·ªÉ th·ª±c hi·ªán vi·ªác ph√¢n r√£ v√† ph√¢n t√≠ch truy v·∫•n.
        """
        self.ai_handler = ai_handler

    def decompose_query(self, query: str) -> List[str]:
        """
        S·ª≠ d·ª•ng AI Handler ƒë∆∞·ª£c cung c·∫•p ƒë·ªÉ t√°ch truy v·∫•n TRAKE th√†nh c√°c b∆∞·ªõc h√†nh ƒë·ªông con.
        """
        print(f"--- ü§ñ Ph√¢n r√£ truy v·∫•n TRAKE b·∫±ng AI Handler... ---")
        # ·ª¶y quy·ªÅn ho√†n to√†n vi·ªác g·ªçi API cho handler
        return self.ai_handler.decompose_trake_query(query)

    def find_sequences(self, 
                       sub_queries: List[str], 
                       searcher: 'SemanticSearcher',
                       original_query_analysis: Dict[str, Any], # <-- TH√äM THAM S·ªê N√ÄY
                       top_k_per_step: int, 
                       max_sequences: int,
                       beam_width: int = 5 # Th√™m tham s·ªë beam_width
                      ) -> List[Dict[str, Any]]:
        """
        T√¨m c√°c chu·ªói keyframe h·ª£p l·ªá b·∫±ng thu·∫≠t to√°n Beam Search.
        """
        if not sub_queries:
            return []

        print(f"--- B·∫Øt ƒë·∫ßu t√¨m ki·∫øm ·ª©ng vi√™n cho {len(sub_queries)} b∆∞·ªõc TRAKE ---")
        
        # --- B∆∞·ªõc 1: T√¨m ki·∫øm ·ª©ng vi√™n cho m·ªói b∆∞·ªõc (kh√¥ng ƒë·ªïi) ---
        step_candidates = []
        for i, sub_query in enumerate(sub_queries):
            print(f"   -> B∆∞·ªõc {i+1}: ƒêang t√¨m ki·∫øm cho '{sub_query}'")
            
            # Logic g·ªçi AI handler v√† searcher gi·ªØ nguy√™n
            sub_query_analysis = self.ai_handler.analyze_query_fully(sub_query)
            sub_query_analysis['w_clip'] = original_query_analysis.get('w_clip')
            sub_query_analysis['w_obj'] = original_query_analysis.get('w_obj')
            sub_query_analysis['w_semantic'] = original_query_analysis.get('w_semantic')
            search_context = sub_query_analysis.get('search_context', sub_query)
            
            results = searcher.search(
                query_text=search_context,
                precomputed_analysis=sub_query_analysis,
                top_k_final=top_k_per_step,
                top_k_retrieval=200
            )
            step_candidates.append(results)
        
        # --- B∆∞·ªõc 2: Nh√≥m ·ª©ng vi√™n theo video_id (kh√¥ng ƒë·ªïi) ---
        print("\n--- ƒêang nh√≥m c√°c ·ª©ng vi√™n theo video ---")
        candidates_by_video: Dict[str, List[List[Dict]]] = {}
        for i, candidates in enumerate(step_candidates):
            for cand in candidates:
                video_id = cand['video_id']
                if video_id not in candidates_by_video:
                    # Kh·ªüi t·∫°o danh s√°ch r·ªóng cho m·ªói b∆∞·ªõc
                    candidates_by_video[video_id] = [[] for _ in sub_queries]
                candidates_by_video[video_id][i].append(cand)
        
        # --- B∆∞·ªõc 3: √Åp d·ª•ng Beam Search tr√™n t·ª´ng video ---
        print(f"\n--- B·∫Øt ƒë·∫ßu l·∫Øp r√°p chu·ªói b·∫±ng Beam Search (beam_width={beam_width}) ---")
        all_valid_sequences = []
        for video_id, video_step_candidates in candidates_by_video.items():
            # ƒêi·ªÅu ki·ªán ti√™n quy·∫øt: video ph·∫£i c√≥ ·ª©ng vi√™n cho m·ªói b∆∞·ªõc
            if not all(video_step_candidates):
                continue
            
            # Kh·ªüi t·∫°o beam v·ªõi c√°c ·ª©ng vi√™n c·ªßa b∆∞·ªõc ƒë·∫ßu ti√™n
            # M·ªói ph·∫ßn t·ª≠ trong beam l√† m·ªôt tuple: (chu·ªói_hi·ªán_t·∫°i, ƒëi·ªÉm_s·ªë_t√≠ch_l≈©y)
            beam = [([cand], cand['final_score']) for cand in video_step_candidates[0]]
            
            # L·∫∑p qua c√°c b∆∞·ªõc ti·∫øp theo ƒë·ªÉ m·ªü r·ªông beam
            for step_idx in range(1, len(sub_queries)):
                next_beam = []
                # V·ªõi m·ªói chu·ªói ƒëang c√≥ trong beam
                for current_sequence, current_score in beam:
                    last_frame_timestamp = current_sequence[-1]['timestamp']
                    
                    # T√¨m c√°c ·ª©ng vi√™n h·ª£p l·ªá ·ªü b∆∞·ªõc ti·∫øp theo
                    for next_candidate in video_step_candidates[step_idx]:
                        # R√†ng bu·ªôc c·ª©ng: th·ª© t·ª± th·ªùi gian ph·∫£i tƒÉng d·∫ßn
                        if next_candidate['timestamp'] > last_frame_timestamp:
                            new_sequence = current_sequence + [next_candidate]
                            # ƒêi·ªÉm s·ªë m·ªõi l√† t·ªïng ƒëi·ªÉm t√≠ch l≈©y + ƒëi·ªÉm c·ªßa frame m·ªõi
                            new_score = current_score + next_candidate['final_score']
                            next_beam.append((new_sequence, new_score))
                
                # S·∫Øp x·∫øp t·∫•t c·∫£ c√°c chu·ªói m·ªü r·ªông v√† ch·ªâ gi·ªØ l·∫°i `beam_width` chu·ªói t·ªët nh·∫•t
                next_beam.sort(key=lambda x: x[1], reverse=True)
                beam = next_beam[:beam_width]

            # Sau khi duy·ªát qua t·∫•t c·∫£ c√°c b∆∞·ªõc, c√°c chu·ªói trong beam l√† c√°c chu·ªói ho√†n ch·ªânh
            for final_sequence, total_score in beam:
                # ƒêi·ªÉm cu·ªëi c√πng l√† trung b√¨nh c·ªông
                avg_score = total_score / len(final_sequence)
                all_valid_sequences.append({
                    "video_id": video_id,
                    "sequence": final_sequence,
                    "final_score": avg_score
                })

        # --- B∆∞·ªõc 4: S·∫Øp x·∫øp t·∫•t c·∫£ c√°c chu·ªói h·ª£p l·ªá t·ª´ t·∫•t c·∫£ c√°c video ---
        print(f"--- T√¨m th·∫•y t·ªïng c·ªông {len(all_valid_sequences)} chu·ªói h·ª£p l·ªá. ƒêang s·∫Øp x·∫øp... ---")
        sorted_sequences = sorted(all_valid_sequences, key=lambda x: x['final_score'], reverse=True)
        
        return sorted_sequences[:max_sequences]