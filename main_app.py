# /kaggle/working/main_app.py

# ==============================================================================
# === PH·∫¶N 1: SETUP V√Ä IMPORTS ===
# ==============================================================================
print("--- üöÄ B·∫Øt ƒë·∫ßu kh·ªüi ch·∫°y AIC25 Video Search Engine ---")
print("--- Giai ƒëo·∫°n 1/4: ƒêang t·∫£i c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt...")

import gradio as gr
import pandas as pd
import os
import glob
import time
import numpy as np
from kaggle_secrets import UserSecretsClient
from typing import Dict, Any

# Import c√°c module c·ªët l√µi t·ª´ c·∫•u tr√∫c d·ª± √°n c·ªßa ch√∫ng ta
# Gi·∫£ s·ª≠ c·∫•u tr√∫c th∆∞ m·ª•c ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p ƒë√∫ng
from search_core.basic_searcher import BasicSearcher
from search_core.semantic_searcher import SemanticSearcher
from search_core.master_searcher import MasterSearcher
from search_core.task_analyzer import TaskType

# Import c√°c h√†m ti·ªán √≠ch ƒë√£ ƒë∆∞·ª£c ƒë√≥ng g√≥i
from utils import (
    create_video_segment,
    format_results_for_gallery,
    format_for_submission,
    generate_submission_file
)

# ==============================================================================
# === PH·∫¶N 2: KH·ªûI T·∫†O BACKEND (SINGLETON PATTERN) ===
# ==============================================================================
print("--- Giai ƒëo·∫°n 2/4: ƒêang c·∫•u h√¨nh v√† kh·ªüi t·∫°o Backend...")

# --- C·∫•u h√¨nh API Key ---
try:
    user_secrets = UserSecretsClient()
    GOOGLE_API_KEY = user_secrets.get_secret("GOOGLE_API_KEY")
    print("--- ‚úÖ C·∫•u h√¨nh Google API Key th√†nh c√¥ng! ---")
except Exception as e:
    GOOGLE_API_KEY = None
    print(f"--- ‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y Google API Key. L·ªói: {e} ---")

# --- ƒê∆∞·ªùng d·∫´n D·ªØ li·ªáu (Constants) ---
FAISS_INDEX_PATH = '/kaggle/input/stage1/faiss.index'
RERANK_METADATA_PATH = '/kaggle/input/stage1/rerank_metadata.parquet'
VIDEO_BASE_PATH = "/kaggle/input/aic2025-batch-1-video/"
ALL_ENTITIES_PATH = "/kaggle/input/stage1/all_detection_entities.json"

# --- S·ª≠ d·ª•ng @gr.cache ƒë·ªÉ ƒë·∫£m b·∫£o model ch·ªâ ƒë∆∞·ª£c load M·ªòT L·∫¶N ---
@gr.cache
def get_master_searcher():
    """
    H√†m kh·ªüi t·∫°o singleton cho to√†n b·ªô backend.
    Gradio s·∫Ω cache k·∫øt qu·∫£ c·ªßa h√†m n√†y, tr√°nh vi·ªác load l·∫°i model m·ªói khi reload UI.
    """
    print("--- ƒêang kh·ªüi t·∫°o c√°c model AI (qu√° tr√¨nh n√†y ch·ªâ ch·∫°y m·ªôt l·∫ßn)... ---")
    all_video_files = glob.glob(os.path.join(VIDEO_BASE_PATH, "**", "*.mp4"), recursive=True)
    video_path_map = {os.path.basename(f).replace('.mp4', ''): f for f in all_video_files}

    # MasterSearcher s·∫Ω t·ª± qu·∫£n l√Ω vi·ªác kh·ªüi t·∫°o c√°c th√†nh ph·∫ßn con
    basic_searcher = BasicSearcher(FAISS_INDEX_PATH, RERANK_METADATA_PATH, video_path_map)
    master_searcher = MasterSearcher(basic_searcher=basic_searcher, gemini_api_key=GOOGLE_API_KEY)
    
    return master_searcher

# Load c√°c model ngay khi app kh·ªüi ƒë·ªông v√† l∆∞u v√†o bi·∫øn to√†n c·ª•c
master_searcher = get_master_searcher()

# ==============================================================================
# === PH·∫¶N 3: C√ÅC H√ÄM LOGIC CHO GIAO DI·ªÜN (UI LOGIC) ===
# ==============================================================================
print("--- Giai ƒëo·∫°n 3/4: ƒêang ƒë·ªãnh nghƒ©a c√°c h√†m logic cho giao di·ªán...")

def perform_search(query_text: str, num_results: int):
    """
    H√†m ch√≠nh x·ª≠ l√Ω s·ª± ki·ªán t√¨m ki·∫øm. G·ªçi MasterSearcher v√† ƒë·ªãnh d·∫°ng k·∫øt qu·∫£.
    """
    if not query_text.strip():
        gr.Warning("Vui l√≤ng nh·∫≠p truy v·∫•n t√¨m ki·∫øm!")
        return [], "‚ö†Ô∏è Vui l√≤ng nh·∫≠p truy v·∫•n v√† b·∫•m T√¨m ki·∫øm.", None, "", ""

    start_time = time.time()
    
    # G·ªçi h√†m search ch√≠nh c·ªßa backend
    response = master_searcher.search(query=query_text, top_k=num_results)
    
    search_time = time.time() - start_time
    
    # ƒê·ªãnh d·∫°ng k·∫øt qu·∫£ cho gallery
    formatted_gallery = format_results_for_gallery(response)
    
    # L·∫•y th√¥ng tin ph√¢n t√≠ch
    query_analysis = response.get('query_analysis', {})
    gemini_analysis_html = f"""
    <div style="background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%); padding: 20px; border-radius: 12px; color: white; margin: 10px 0; box-shadow: 0 4px 15px rgba(0,0,0,0.1);">
        <h3 style="margin: 0; color: white; display: flex; align-items: center;">
            üß† Ph√¢n t√≠ch truy v·∫•n AI
        </h3>
        <div style="margin-top: 15px;">
            <div style="background: rgba(255,255,255,0.1); padding: 10px; border-radius: 8px; margin: 8px 0;">
                <strong>üéØ ƒê·ªëi t∆∞·ª£ng (VI):</strong> <code style="background: rgba(255,255,255,0.2); padding: 2px 8px; border-radius: 4px;">{', '.join(response['query_analysis'].get('objects_vi', []))}</code>
            </div>
            <div style="background: rgba(255,255,255,0.1); padding: 10px; border-radius: 8px; margin: 8px 0;">
                <strong>üåç ƒê·ªëi t∆∞·ª£ng (EN):</strong> <code style="background: rgba(255,255,255,0.2); padding: 2px 8px; border-radius: 4px;">{', '.join(response['query_analysis'].get('objects_en', []))}</code>
            </div>
            <div style="background: rgba(255,255,255,0.1); padding: 10px; border-radius: 8px; margin: 8px 0;">
                <strong>üìù B·ªëi c·∫£nh:</strong> <em>"{response['query_analysis'].get('context_vi', '')}"</em>
            </div>
        </div>
    </div>
    """
        
    # T·∫°o th√¥ng tin th·ªëng k√™
    stats_info_html =  f"""
    <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 20px; border-radius: 12px; color: white; margin: 10px 0;">
        <h3 style="margin: 0; color: white;">üîÑ ƒêang x·ª≠ l√Ω truy v·∫•n...</h3>
        <p style="margin: 10px 0 0 0; opacity: 0.9;"> S·ªë k·∫øt qu·∫£: <strong>{num_results}</strong></p>
    </div>
    """
    
    # T·∫°o th√¥ng b√°o tr·∫°ng th√°i
    task_type_msg = response.get('task_type', TaskType.KIS).value
    status_msg_html = f"‚úÖ T√¨m ki·∫øm ho√†n t·∫•t trong {search_time:.2f}s. Ch·∫ø ƒë·ªô: {task_type_msg}"
    
    return formatted_gallery, status_msg_html, response, gemini_analysis_html, stats_info_html

def on_gallery_select(evt: gr.SelectData, response_state: dict):
    """
    X·ª≠ l√Ω khi ng∆∞·ªùi d√πng ch·ªçn m·ªôt ·∫£nh trong gallery.
    """
    if not response_state:
        gr.Warning("Vui l√≤ng th·ª±c hi·ªán t√¨m ki·∫øm tr∆∞·ªõc khi ch·ªçn ·∫£nh.")
        return None, "‚ö†Ô∏è Vui l√≤ng th·ª±c hi·ªán t√¨m ki·∫øm tr∆∞·ªõc.", ""

    task_type = response_state.get('task_type')
    results = response_state.get('results', [])
    selected_result = results[evt.index]

    if task_type == TaskType.TRAKE:
        # X·ª≠ l√Ω hi·ªÉn th·ªã cho TRAKE (hi·ªÉn th·ªã t·∫•t c·∫£ c√°c frame trong chu·ªói)
        # TODO: Implement a more sophisticated display for TRAKE sequences
        first_frame = selected_result['sequence'][0]
        video_path = first_frame.get('video_path')
        timestamp = first_frame.get('timestamp')
        detailed_info_html = "ƒê√¢y l√† k·∫øt qu·∫£ c·ªßa m·ªôt chu·ªói h√†nh ƒë·ªông..."
    else: # KIS v√† QNA
        video_path = selected_result.get('video_path')
        timestamp = selected_result.get('timestamp')
        detailed_info_html = "Chi ti·∫øt Keyframe..." # Copy t·ª´ b·∫£n nh√°p tr∆∞·ªõc
    
    video_clip_path = create_video_segment(video_path, timestamp)
    clip_info_html = f"üé• Video Clip (10 gi√¢y) t·ª´ {max(0, timestamp - 5):.1f}s"
    
    return video_clip_path, detailed_info_html, clip_info_html

def handle_submission(response_state: dict, query_id: str):
    """
    T·∫°o v√† cung c·∫•p file n·ªôp b√†i.
    """
    if not response_state or not response_state.get('results'):
        gr.Warning("Kh√¥ng c√≥ k·∫øt qu·∫£ ƒë·ªÉ t·∫°o file n·ªôp b√†i.")
        return None
    
    if not query_id.strip():
        gr.Warning("Vui l√≤ng nh·∫≠p Query ID ƒë·ªÉ t·∫°o file.")
        return None
        
    submission_df = format_for_submission(response_state, max_results=100)
    
    if submission_df.empty:
        gr.Warning("Kh√¥ng th·ªÉ ƒë·ªãnh d·∫°ng k·∫øt qu·∫£ ƒë·ªÉ n·ªôp b√†i.")
        return None
              
    file_path = generate_submission_file(submission_df, query_id=query_id)
    return file_path

def clear_all():
    """
    X√≥a t·∫•t c·∫£ c√°c output tr√™n giao di·ªán.
    """
    return (
        [],                  # results_gallery
        "",                  # status_output
        None,                # response_state
        "",                  # gemini_analysis
        "",                  # stats_info
        None,                # video_player
        "",                  # detailed_info
        "",                  # clip_info
        "",                  # query_id_input
        None                 # submission_file_output
    )

# ==============================================================================
# === PH·∫¶N 4: GIAO DI·ªÜN GRADIO (UI LAYOUT) ===
# ==============================================================================
print("--- Giai ƒëo·∫°n 4/4: ƒêang x√¢y d·ª±ng giao di·ªán ng∆∞·ªùi d√πng...")

custom_css = """
/* ·∫®n footer */
footer {display: none !important}

/* Custom styling cho gallery */
.gallery {
    border-radius: 12px !important;
    box-shadow: 0 8px 32px rgba(0,0,0,0.1) !important;
}

/* Animation cho buttons */
.gradio-button {
    transition: all 0.3s ease !important;
    border-radius: 25px !important;
    font-weight: 600 !important;
}

.gradio-button:hover {
    transform: translateY(-2px) !important;
    box-shadow: 0 8px 25px rgba(0,0,0,0.15) !important;
}

/* Custom textbox styling */
.gradio-textbox {
    border-radius: 12px !important;
    border: 2px solid #e0e0e0 !important;
    transition: all 0.3s ease !important;
}

.gradio-textbox:focus {
    border-color: #667eea !important;
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1) !important;
}

/* Video player styling */
video {
    border-radius: 12px !important;
    box-shadow: 0 8px 32px rgba(0,0,0,0.1) !important;
}

/* Gallery items hover effect */
.gallery img {
    transition: transform 0.3s ease !important;
    border-radius: 8px !important;
}

.gallery img:hover {
    transform: scale(1.05) !important;
}

/* Scrollbar styling */
::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 4px;
}

::-webkit-scrollbar-thumb {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
    background: linear-gradient(135deg, #5a67d8 0%, #6b46c1 100%);
}
"""
app_header_html = """
        <div style="text-align: center; max-width: 1200px; margin: 0 auto 30px auto;">
            <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 40px 20px; border-radius: 20px; color: white; box-shadow: 0 10px 40px rgba(0,0,0,0.1);">
                <h1 style="margin: 0 0 15px 0; font-size: 3em; font-weight: 700; text-shadow: 2px 2px 4px rgba(0,0,0,0.3);">
                    üöÄ AIC25 Video Search Engine
                </h1>
                <p style="margin: 0; font-size: 1.3em; opacity: 0.9; font-weight: 300;">
                    H·ªá th·ªëng t√¨m ki·∫øm video th√¥ng minh v·ªõi AI - Nh·∫≠p m√¥ t·∫£ b·∫±ng ti·∫øng Vi·ªát
                </p>
                <div style="margin-top: 20px; display: flex; justify-content: center; gap: 20px; flex-wrap: wrap;">
                    <div style="background: rgba(255,255,255,0.1); padding: 8px 16px; border-radius: 15px; font-size: 0.9em;">
                        ‚ö° Semantic Search
                    </div>
                    <div style="background: rgba(255,255,255,0.1); padding: 8px 16px; border-radius: 15px; font-size: 0.9em;">
                        üéØ Object Detection
                    </div>
                    <div style="background: rgba(255,255,255,0.1); padding: 8px 16px; border-radius: 15px; font-size: 0.9em;">
                        üß† Gemini AI
                    </div>
                </div>
            </div>
        </div>
    """
usage_guide_html = """
        <div style="padding: 20px; background: linear-gradient(135deg, #74b9ff 0%, #0984e3 100%); border-radius: 12px; color: white;">
            <h3 style="margin-top: 0; color: white;">C√°ch s·ª≠ d·ª•ng h·ªá th·ªëng:</h3>
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin-top: 20px;">
                <div style="background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;">
                    <h4 style="margin: 0 0 10px 0; color: white;">üîç T√¨m ki·∫øm</h4>
                    <ul style="margin: 0; padding-left: 20px;">
                        <li>Nh·∫≠p m√¥ t·∫£ chi ti·∫øt b·∫±ng ti·∫øng Vi·ªát</li>
                        <li>S·ª≠ d·ª•ng t·ª´ ng·ªØ c·ª• th·ªÉ v·ªÅ ƒë·ªëi t∆∞·ª£ng, h√†nh ƒë·ªông, ƒë·ªãa ƒëi·ªÉm</li>
                        <li>Ch·ªçn ch·∫ø ƒë·ªô Semantic Search ƒë·ªÉ c√≥ k·∫øt qu·∫£ t·ªët nh·∫•t</li>
                    </ul>
                </div>
                <div style="background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;">
                    <h4 style="margin: 0 0 10px 0; color: white;">üé¨ Xem video</h4>
                    <ul style="margin: 0; padding-left: 20px;">
                        <li>Click v√†o b·∫•t k·ª≥ ·∫£nh n√†o trong k·∫øt qu·∫£</li>
                        <li>Video clip 10 gi√¢y s·∫Ω ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông</li>
                        <li>Xem th√¥ng tin chi ti·∫øt v·ªÅ ƒëi·ªÉm s·ªë v√† ƒë·ªëi t∆∞·ª£ng</li>
                    </ul>
                </div>
                <div style="background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;">
                    <h4 style="margin: 0 0 10px 0; color: white;">‚öôÔ∏è T√πy ch·ªânh</h4>
                    <ul style="margin: 0; padding-left: 20px;">
                        <li>ƒêi·ªÅu ch·ªânh s·ªë l∆∞·ª£ng k·∫øt qu·∫£ (6-24)</li>
                        <li>So s√°nh gi·ªØa Basic CLIP v√† Semantic Search</li>
                        <li>Xem ph√¢n t√≠ch AI t·ª´ Gemini</li>
                    </ul>
                </div>
            </div>
        </div>
        """
app_footer_html = """
    <div style="text-align: center; margin-top: 40px; padding: 20px; background: linear-gradient(135deg, #636e72 0%, #2d3436 100%); border-radius: 12px; color: white;">
        <p style="margin: 0; opacity: 0.8;">
            üöÄ AIC25 Video Search Engine - Powered by AI & Computer Vision
        </p>
        <p style="margin: 5px 0 0 0; font-size: 0.9em; opacity: 0.6;">
            S·ª≠ d·ª•ng Semantic Search, Object Detection v√† Gemini AI ƒë·ªÉ t√¨m ki·∫øm video th√¥ng minh
        </p>
    </div>
    """

with gr.Blocks(theme=gr.themes.Soft(), css=custom_css, title="üöÄ AIC25 Video Search") as app:
    
    gr.HTML(app_header_html)
    
    # State ƒë·ªÉ l∆∞u tr·ªØ k·∫øt qu·∫£ t√¨m ki·∫øm ƒë·∫ßy ƒë·ªß gi·ªØa c√°c l·∫ßn t∆∞∆°ng t√°c
    response_state = gr.State()
    
     # --- B·ªë c·ª•c Ph·∫ßn Nh·∫≠p li·ªáu ---
    with gr.Row():
        with gr.Column(scale=8):
            query_input = gr.Textbox(
                label="üîç Nh·∫≠p truy v·∫•n t√¨m ki·∫øm",
                placeholder="V√≠ d·ª•: m·ªôt ng∆∞·ªùi ƒë√†n √¥ng m·∫∑c √°o xanh ƒëang n√≥i chuy·ªán ƒëi·ªán tho·∫°i trong c√¥ng vi√™n...",
                lines=2,
                autofocus=True,
                elem_classes=["search-input"]
            )
        with gr.Column(scale=2):
            search_mode = gr.Dropdown(
                choices=["Semantic Search", "Basic CLIP Search"],
                value="Semantic Search",
                label="üéõÔ∏è Ch·∫ø ƒë·ªô t√¨m ki·∫øm",
                interactive=True
            )
    
    with gr.Row():
        with gr.Column(scale=2):
            search_button = gr.Button(
                "üöÄ T√¨m ki·∫øm",
                variant="primary",
                size="lg",
                elem_classes=["search-button"]
            )
        with gr.Column(scale=2):
            num_results = gr.Slider(
                minimum=6,
                maximum=24,
                value=12,
                step=3,
                label="üìä S·ªë k·∫øt qu·∫£",
                interactive=True
            )
        with gr.Column(scale=4):
            clear_button = gr.Button(
                "üóëÔ∏è X√≥a k·∫øt qu·∫£",
                variant="secondary",
                size="lg"
            )
    
        
    # --- B·ªë c·ª•c Ph·∫ßn Hi·ªÉn th·ªã Tr·∫°ng th√°i v√† Ph√¢n t√≠ch ---
    status_output = gr.HTML()
    with gr.Row():
        gemini_analysis = gr.HTML()
        stats_info = gr.HTML()
    
    # --- B·ªë c·ª•c Ph·∫ßn K·∫øt qu·∫£ ---
    with gr.Row():
        with gr.Column(scale=2):
            results_gallery = gr.Gallery(
                label="üñºÔ∏è K·∫øt qu·∫£ t√¨m ki·∫øm",
                show_label=True,
                elem_id="results-gallery",
                columns=3,
                rows=4,
                object_fit="cover",
                height=600,
                allow_preview=True,
                preview=True
            )
        
        with gr.Column(scale=1):
            with gr.Row():
                video_player = gr.Video(
                    label="üé¨ Video Clip",
                    height=300,
                    autoplay=True,
                    show_share_button=False
                )
            clip_info = gr.HTML()
            detailed_info = gr.HTML()

    # --- B·ªë c·ª•c Ph·∫ßn N·ªôp b√†i ---
    with gr.Accordion("üíæ T·∫°o File N·ªôp B√†i", open=False):
        with gr.Row():
            query_id_input = gr.Textbox(label="Nh·∫≠p Query ID", placeholder="V√≠ d·ª•: query_01")
            submission_button = gr.Button("T·∫°o File")
        submission_file_output = gr.File(label="T·∫£i file n·ªôp b√†i c·ªßa b·∫°n")

    gr.HTML(usage_guide_html)
    gr.HTML(app_footer_html)

    # --- Li√™n k·∫øt c√°c s·ª± ki·ªán (Event Listeners) ---
    # (D√°n to√†n b·ªô ph·∫ßn li√™n k·∫øt s·ª± ki·ªán t·ª´ b·∫£n nh√°p tr∆∞·ªõc)
    search_inputs = [query_input, num_results]
    search_outputs = [results_gallery, status_output, response_state, gemini_analysis, stats_info]
    
    search_button.click(fn=perform_search, inputs=search_inputs, outputs=search_outputs)
    query_input.submit(fn=perform_search, inputs=search_inputs, outputs=search_outputs)
    
    results_gallery.select(
        fn=on_gallery_select,
        inputs=[response_state],
        outputs=[video_player, detailed_info, clip_info]
    )
    
    submission_button.click(
        fn=handle_submission,
        inputs=[response_state, query_id_input],
        outputs=[submission_file_output]
    )

    clear_outputs = [
        results_gallery, status_output, response_state, gemini_analysis, stats_info,
        video_player, detailed_info, clip_info, query_id_input, submission_file_output
    ]
    clear_button.click(fn=clear_all, inputs=[], outputs=clear_outputs)

# ==============================================================================
# === LAUNCH ·ª®NG D·ª§NG ===
# ==============================================================================
if __name__ == "__main__":
    print("--- üöÄ Kh·ªüi ch·∫°y Gradio App Server ---")
    app.launch(
        share=True,
        # allowed_paths cho ph√©p Gradio truy c·∫≠p c√°c file trong th∆∞ m·ª•c n√†y,
        # c·ª±c k·ª≥ quan tr·ªçng ƒë·ªÉ hi·ªÉn th·ªã ·∫£nh keyframe v√† video clip.
        allowed_paths=["/kaggle/input/", "/kaggle/working/"],
        debug=True, # B·∫≠t debug ƒë·ªÉ xem l·ªói chi ti·∫øt tr√™n console
        show_error=True # Hi·ªÉn th·ªã l·ªói tr√™n giao di·ªán
    )