# /kaggle/working/search_core/master_searcher.py

from typing import Dict, Any, Optional

# Import c√°c th√†nh ph·∫ßn c·∫ßn thi·∫øt
from search_core.basic_searcher import BasicSearcher
from search_core.semantic_searcher import SemanticSearcher
from search_core.trake_solver import TRAKESolver
from search_core.openai_handler import OpenAIHandler # <-- IMPORT HANDLER M·ªöI
from search_core.task_analyzer import TaskType      # <-- V·∫´n d√πng Enum ƒë·ªÉ code r√µ r√†ng

class MasterSearcher:
    """
    L·ªõp ƒëi·ªÅu ph·ªëi ch√≠nh c·ªßa h·ªá th·ªëng t√¨m ki·∫øm (OpenAI Edition).
    N√≥ qu·∫£n l√Ω OpenAIHandler v√† ƒëi·ªÅu ph·ªëi c√°c t√°c v·ª• ƒë·∫øn ƒë√∫ng n∆°i.
    """

    def __init__(self, 
                 basic_searcher: BasicSearcher, 
                 openai_api_key: Optional[str] = None):
        """
        Kh·ªüi t·∫°o MasterSearcher phi√™n b·∫£n OpenAI.

        Args:
            basic_searcher (BasicSearcher): M·ªôt instance c·ªßa BasicSearcher ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o.
            openai_api_key (Optional[str]): API key cho OpenAI.
        """
        print("--- üß† Kh·ªüi t·∫°o Master Searcher (OpenAI Edition) ---")
        
        # SemanticSearcher kh√¥ng c√≤n c·∫ßn model AI n·ªØa, n√≥ ch·ªâ l√†m nhi·ªám v·ª• reranking
        self.semantic_searcher = SemanticSearcher(basic_searcher=basic_searcher)
        
        self.openai_handler: Optional[OpenAIHandler] = None
        self.trake_solver: Optional[TRAKESolver] = None
        self.ai_enabled = False

        if openai_api_key:
            try:
                # Kh·ªüi t·∫°o m·ªôt handler duy nh·∫•t
                self.openai_handler = OpenAIHandler(api_key=openai_api_key)
                
                # TODO: Th√™m health check cho OpenAI n·∫øu c·∫ßn, t∆∞∆°ng t·ª± nh∆∞ ƒë√£ l√†m v·ªõi Gemini
                
                # Cung c·∫•p handler cho c√°c module con c·∫ßn n√≥
                self.trake_solver = TRAKESolver(ai_handler=self.openai_handler)
                
                self.ai_enabled = True
                print("--- ‚úÖ OpenAI Handler ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng! ---")

            except Exception as e:
                print(f"--- ‚ö†Ô∏è L·ªói khi kh·ªüi t·∫°o OpenAI Handler: {e}. AI s·∫Ω b·ªã v√¥ hi·ªáu h√≥a. ---")
                self.ai_enabled = False
        else:
            print("--- ‚ö†Ô∏è Kh√¥ng c√≥ OpenAI API Key. AI s·∫Ω b·ªã v√¥ hi·ªáu h√≥a. ---")
            self.ai_enabled = False
            
        print(f"--- ‚úÖ Master Searcher ƒë√£ s·∫µn s√†ng! (AI Enabled: {self.ai_enabled}) ---")

    def search(self, query: str, top_k: int = 100) -> Dict[str, Any]:
        """
        H√†m t√¨m ki·∫øm ch√≠nh, ƒëi·ªÅu ph·ªëi to√†n b·ªô pipeline s·ª≠ d·ª•ng OpenAIHandler.
        """
        query_analysis = {}
        task_type = TaskType.KIS # M·∫∑c ƒë·ªãnh

        if self.ai_enabled:
            print("--- ü§ñ B·∫Øt ƒë·∫ßu ph√¢n t√≠ch truy v·∫•n b·∫±ng OpenAI... ---")
            query_analysis = self.openai_handler.enhance_query(query)
            task_type_str = self.openai_handler.analyze_task_type(query)
            
            # Chuy·ªÉn ƒë·ªïi string tr·∫£ v·ªÅ t·ª´ API th√†nh Enum
            try:
                task_type = TaskType[task_type_str]
            except KeyError:
                print(f"--- ‚ö†Ô∏è Lo·∫°i task kh√¥ng x√°c ƒë·ªãnh '{task_type_str}'. Fallback v·ªÅ KIS. ---")
                task_type = TaskType.KIS
        
        print(f"--- ƒê√£ ph√¢n lo·∫°i truy v·∫•n l√†: {task_type.value} ---")

        final_results = []
        search_context = query_analysis.get('search_context', query)
        
        # --- ƒêi·ªÅu ph·ªëi d·ª±a tr√™n lo·∫°i nhi·ªám v·ª• ---
        if task_type == TaskType.TRAKE:
            if self.trake_solver:
                sub_queries = self.trake_solver.decompose_query(query)
                final_results = self.trake_solver.find_sequences(sub_queries, self.semantic_searcher, max_sequences=top_k)
            else:
                 final_results = self.semantic_searcher.search(search_context, top_k_final=top_k, precomputed_analysis=query_analysis)

        elif task_type == TaskType.QNA:
            # T√¨m ·ª©ng vi√™n b·ªëi c·∫£nh
            candidates = self.semantic_searcher.search(search_context, top_k_final=8, top_k_retrieval=200, precomputed_analysis=query_analysis)
            
            specific_question = query_analysis.get('specific_question', query)
            vqa_enhanced_candidates = []
            for cand in candidates:
                vqa_result = self.openai_handler.perform_vqa(cand['keyframe_path'], specific_question)
                
                new_cand = cand.copy()
                new_cand['answer'] = vqa_result['answer']
                
                search_score = new_cand['final_score']
                vqa_confidence = vqa_result['confidence']
                final_vqa_score = search_score * vqa_confidence
                
                new_cand['final_score'] = final_vqa_score
                new_cand['scores']['search_score'] = search_score
                new_cand['scores']['vqa_confidence'] = vqa_confidence
                
                vqa_enhanced_candidates.append(new_cand)
            
            final_results = sorted(vqa_enhanced_candidates, key=lambda x: x['final_score'], reverse=True)

        else: # TaskType.KIS
            final_results = self.semantic_searcher.search(search_context, top_k_final=top_k, precomputed_analysis=query_analysis)

        return {
            "task_type": task_type,
            "results": final_results[:top_k],
            "query_analysis": query_analysis
        }